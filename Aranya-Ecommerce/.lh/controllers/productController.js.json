{
    "sourceFile": "controllers/productController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752852643015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752866017183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,11 +4,19 @@\n import fs from \"fs\";\r\n import slugify from \"slugify\";\r\n // import braintree from \"braintree\";\r\n import dotenv from \"dotenv\";\r\n+import Razorpay from \"razorpay\";\r\n+import crypto from \"crypto\";\r\n \r\n dotenv.config();\r\n \r\n+//razorpay--\r\n+const razorpay = new Razorpay({\r\n+  key_id: process.env.RAZORPAY_KEY_ID,\r\n+  key_secret: process.env.RAZORPAY_SECRET_KEY,\r\n+});\r\n+\r\n // Braintree gateway config\r\n // const gateway = new braintree.BraintreeGateway({\r\n   // environment: braintree.Environment.Sandbox,\r\n   // merchantId: process.env.BRAINTREE_MERCHANT_ID,\r\n@@ -312,4 +320,32 @@\n     // console.error(error);\r\n     // res.status(500).send({ success: false, message: \"Error processing payment\", error });\r\n   // }\r\n // };\r\n+\r\n+\r\n+\r\n+// Add Razorpay controllers at bottom of file-----\r\n+export const createRazorpayOrder = async (req, res) => {\r\n+  try {\r\n+    const amount = req.body.amount * 100;\r\n+    const options = { amount, currency: \"INR\", receipt: `rcpt_${Date.now()}` };\r\n+    const order = await razorpay.orders.create(options);\r\n+    res.json(order);\r\n+  } catch (err) {\r\n+    console.error(\"Create Razorpay Order Error:\", err);\r\n+    res.status(500).json({ error: \"Order creation failed\" });\r\n+  }\r\n+};\r\n+\r\n+export const verifyRazorpayPayment = async (req, res) => {\r\n+  const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\r\n+  const sign = `${razorpay_order_id}|${razorpay_payment_id}`;\r\n+  const expectedSign = crypto.createHmac(\"sha256\", process.env.RAZORPAY_KEY_SECRET).update(sign).digest(\"hex\");\r\n+\r\n+  if (expectedSign === razorpay_signature) {\r\n+    res.json({ success: true });\r\n+  } else {\r\n+    res.status(400).json({ error: \"Invalid signature\" });\r\n+  }\r\n+};\r\n+\r\n"
                },
                {
                    "date": 1752867812950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,9 +322,58 @@\n   // }\r\n // };\r\n \r\n \r\n+//razor----\r\n \r\n+export const razorpayOrderController = async (req, res) => {\r\n+  try {\r\n+    const instance = new Razorpay({\r\n+      key_id: process.env.RAZORPAY_KEY_ID,\r\n+      key_secret: process.env.RAZORPAY_KEY_SECRET,\r\n+    });\r\n+\r\n+    const options = {\r\n+      amount: req.body.amount * 100, // Convert to paise\r\n+      currency: \"INR\",\r\n+      receipt: `receipt_order_${Date.now()}`,\r\n+    };\r\n+\r\n+    const order = await instance.orders.create(options);\r\n+    res.status(200).json(order);\r\n+  } catch (error) {\r\n+    console.error(\"Razorpay order error:\", error);\r\n+    res.status(500).send({ success: false, message: \"Error creating Razorpay order\", error });\r\n+  }\r\n+};\r\n+\r\n+\r\n+//razor--\r\n+export const razorpayVerifyController = async (req, res) => {\r\n+  try {\r\n+    const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\r\n+\r\n+    const sign = razorpay_order_id + \"|\" + razorpay_payment_id;\r\n+    const expectedSign = crypto\r\n+      .createHmac(\"sha256\", process.env.RAZORPAY_KEY_SECRET)\r\n+      .update(sign)\r\n+      .digest(\"hex\");\r\n+\r\n+    const isAuthentic = expectedSign === razorpay_signature;\r\n+\r\n+    if (isAuthentic) {\r\n+      // You can store payment/order in DB if needed\r\n+      res.status(200).json({ success: true, message: \"Payment verified successfully\" });\r\n+    } else {\r\n+      res.status(400).json({ success: false, message: \"Payment verification failed\" });\r\n+    }\r\n+  } catch (error) {\r\n+    console.error(\"Razorpay verify error:\", error);\r\n+    res.status(500).send({ success: false, message: \"Error verifying payment\", error });\r\n+  }\r\n+};\r\n+\r\n+\r\n // Add Razorpay controllers at bottom of file-----\r\n export const createRazorpayOrder = async (req, res) => {\r\n   try {\r\n     const amount = req.body.amount * 100;\r\n"
                },
                {
                    "date": 1752868409961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,400 @@\n+import productModel from \"../models/productModel.js\";\r\n+import categoryModel from \"../models/categoryModel.js\";\r\n+import orderModel from \"../models/orderModel.js\"; // âœ… Fixed import\r\n+import fs from \"fs\";\r\n+import slugify from \"slugify\";\r\n+// import braintree from \"braintree\";\r\n+import dotenv from \"dotenv\";\r\n+import Razorpay from \"razorpay\";\r\n+import crypto from \"crypto\";\r\n+\r\n+dotenv.config();\r\n+\r\n+//razorpay--\r\n+const razorpay = new Razorpay({\r\n+  key_id: process.env.RAZORPAY_KEY_ID,\r\n+  key_secret: process.env.RAZORPAY_SECRET_KEY,\r\n+});\r\n+\r\n+// Braintree gateway config\r\n+// const gateway = new braintree.BraintreeGateway({\r\n+  // environment: braintree.Environment.Sandbox,\r\n+  // merchantId: process.env.BRAINTREE_MERCHANT_ID,\r\n+  // publicKey: process.env.BRAINTREE_PUBLIC_KEY,\r\n+  // privateKey: process.env.BRAINTREE_PRIVATE_KEY,\r\n+// });\r\n+\r\n+// ======================= CREATE PRODUCT =======================\r\n+export const createProductController = async (req, res) => {\r\n+  try {\r\n+    const { name, description, price, category, quantity, shipping } = req.fields;\r\n+    const { photo } = req.files;\r\n+\r\n+    switch (true) {\r\n+      case !name:\r\n+        return res.status(400).send({ error: \"Name is required\" });\r\n+      case !description:\r\n+        return res.status(400).send({ error: \"Description is required\" });\r\n+      case !price:\r\n+        return res.status(400).send({ error: \"Price is required\" });\r\n+      case !category:\r\n+        return res.status(400).send({ error: \"Category is required\" });\r\n+      case !quantity:\r\n+        return res.status(400).send({ error: \"Quantity is required\" });\r\n+      case photo && photo.size > 1000000:\r\n+        return res.status(400).send({ error: \"Photo should be less than 1MB\" });\r\n+    }\r\n+\r\n+    const product = new productModel({ ...req.fields, slug: slugify(name) });\r\n+    if (photo) {\r\n+      product.photo.data = fs.readFileSync(photo.path);\r\n+      product.photo.contentType = photo.type;\r\n+    }\r\n+    await product.save();\r\n+\r\n+    res.status(201).send({\r\n+      success: true,\r\n+      message: \"Product created successfully\",\r\n+      product,\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).send({ success: false, error, message: \"Error creating product\" });\r\n+  }\r\n+};\r\n+\r\n+// ======================= GET ALL PRODUCTS =======================\r\n+export const getProductController = async (req, res) => {\r\n+  try {\r\n+    const products = await productModel\r\n+      .find({})\r\n+      .populate(\"category\")\r\n+      .select(\"-photo\")\r\n+      .limit(12)\r\n+      .sort({ createdAt: -1 });\r\n+\r\n+    res.status(200).send({\r\n+      success: true,\r\n+      countTotal: products.length,\r\n+      message: \"All products fetched\",\r\n+      products,\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).send({ success: false, message: \"Error fetching products\", error });\r\n+  }\r\n+};\r\n+\r\n+// ======================= GET SINGLE PRODUCT =======================\r\n+export const getSingleProductController = async (req, res) => {\r\n+  try {\r\n+    const product = await productModel\r\n+      .findOne({ slug: req.params.slug })\r\n+      .select(\"-photo\")\r\n+      .populate(\"category\");\r\n+\r\n+    res.status(200).send({\r\n+      success: true,\r\n+      message: \"Single product fetched\",\r\n+      product,\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).send({ success: false, message: \"Error fetching single product\", error });\r\n+  }\r\n+};\r\n+\r\n+// ======================= PRODUCT PHOTO =======================\r\n+export const productPhotoController = async (req, res) => {\r\n+  try {\r\n+    const product = await productModel.findById(req.params.pid).select(\"photo\");\r\n+    if (product?.photo?.data) {\r\n+      res.set(\"Content-Type\", product.photo.contentType);\r\n+      return res.status(200).send(product.photo.data);\r\n+    }\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).send({ success: false, message: \"Error fetching product photo\", error });\r\n+  }\r\n+};\r\n+\r\n+// ======================= DELETE PRODUCT =======================\r\n+export const deleteProductController = async (req, res) => {\r\n+  try {\r\n+    await productModel.findByIdAndDelete(req.params.pid).select(\"-photo\");\r\n+    res.status(200).send({ success: true, message: \"Product deleted successfully\" });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).send({ success: false, message: \"Error deleting product\", error });\r\n+  }\r\n+};\r\n+\r\n+// ======================= UPDATE PRODUCT =======================\r\n+export const updateProductController = async (req, res) => {\r\n+  try {\r\n+    const { name, description, price, category, quantity, shipping } = req.fields;\r\n+    const { photo } = req.files;\r\n+\r\n+    switch (true) {\r\n+      case !name:\r\n+        return res.status(400).send({ error: \"Name is required\" });\r\n+      case !description:\r\n+        return res.status(400).send({ error: \"Description is required\" });\r\n+      case !price:\r\n+        return res.status(400).send({ error: \"Price is required\" });\r\n+      case !category:\r\n+        return res.status(400).send({ error: \"Category is required\" });\r\n+      case !quantity:\r\n+        return res.status(400).send({ error: \"Quantity is required\" });\r\n+      case photo && photo.size > 1000000:\r\n+        return res.status(400).send({ error: \"Photo should be less than 1MB\" });\r\n+    }\r\n+\r\n+    const product = await productModel.findByIdAndUpdate(\r\n+      req.params.pid,\r\n+      { ...req.fields, slug: slugify(name) },\r\n+      { new: true }\r\n+    );\r\n+\r\n+    if (photo) {\r\n+      product.photo.data = fs.readFileSync(photo.path);\r\n+      product.photo.contentType = photo.type;\r\n+    }\r\n+    await product.save();\r\n+\r\n+    res.status(200).send({\r\n+      success: true,\r\n+      message: \"Product updated successfully\",\r\n+      product,\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(500).send({ success: false, error, message: \"Error updating product\" });\r\n+  }\r\n+};\r\n+\r\n+// ======================= FILTER PRODUCTS =======================\r\n+export const productFiltersController = async (req, res) => {\r\n+  try {\r\n+    const { checked, radio } = req.body;\r\n+    let args = {};\r\n+    if (checked.length > 0) args.category = checked;\r\n+    if (radio.length) args.price = { $gte: radio[0], $lte: radio[1] };\r\n+\r\n+    const products = await productModel.find(args);\r\n+    res.status(200).send({ success: true, products });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(400).send({ success: false, message: \"Error filtering products\", error });\r\n+  }\r\n+};\r\n+\r\n+// ======================= PRODUCT COUNT =======================\r\n+export const productCountController = async (req, res) => {\r\n+  try {\r\n+    const total = await productModel.estimatedDocumentCount();\r\n+    res.status(200).send({ success: true, total });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(400).send({ success: false, message: \"Error counting products\", error });\r\n+  }\r\n+};\r\n+\r\n+// ======================= PAGINATED LIST =======================\r\n+export const productListController = async (req, res) => {\r\n+  try {\r\n+    const perPage = 4;\r\n+    const page = req.params.page ? req.params.page : 1;\r\n+    const products = await productModel\r\n+      .find({})\r\n+      .select(\"-photo\")\r\n+      .skip((page - 1) * perPage)\r\n+      .limit(perPage)\r\n+      .sort({ createdAt: -1 });\r\n+\r\n+    res.status(200).send({ success: true, products });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(400).send({ success: false, message: \"Error with pagination\", error });\r\n+  }\r\n+};\r\n+\r\n+// ======================= SEARCH PRODUCT =======================\r\n+export const searchProductController = async (req, res) => {\r\n+  try {\r\n+    const { keyword } = req.params;\r\n+    const results = await productModel\r\n+      .find({\r\n+        $or: [\r\n+          { name: { $regex: keyword, $options: \"i\" } },\r\n+          { description: { $regex: keyword, $options: \"i\" } },\r\n+        ],\r\n+      })\r\n+      .select(\"-photo\");\r\n+\r\n+    res.status(200).send(results);\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(400).send({ success: false, message: \"Error searching products\", error });\r\n+  }\r\n+};\r\n+\r\n+// ======================= RELATED PRODUCTS =======================\r\n+export const relatedProductController = async (req, res) => {\r\n+  try {\r\n+    const { pid, cid } = req.params;\r\n+    const products = await productModel\r\n+      .find({ category: cid, _id: { $ne: pid } })\r\n+      .select(\"-photo\")\r\n+      .limit(3)\r\n+      .populate(\"category\");\r\n+\r\n+    res.status(200).send({ success: true, products });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(400).send({ success: false, message: \"Error fetching related products\", error });\r\n+  }\r\n+};\r\n+\r\n+// ======================= CATEGORY-WISE PRODUCTS =======================\r\n+export const productCategoryController = async (req, res) => {\r\n+  try {\r\n+    const category = await categoryModel.findOne({ slug: req.params.slug });\r\n+    const products = await productModel.find({ category }).populate(\"category\");\r\n+\r\n+    res.status(200).send({ success: true, category, products });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res.status(400).send({ success: false, message: \"Error fetching category products\", error });\r\n+  }\r\n+};\r\n+\r\n+// ======================= BRAINTREE TOKEN =======================\r\n+// export const braintreeTokenController = async (req, res) => {\r\n+  // try {\r\n+    // gateway.clientToken.generate({}, function (err, response) {\r\n+      // if (err) {\r\n+        // res.status(500).send(err);\r\n+      // } else {\r\n+        // res.send(response);\r\n+      // }\r\n+    // });\r\n+  // } catch (error) {\r\n+    // console.error(error);\r\n+    // res.status(500).send({ success: false, message: \"Error generating token\", error });\r\n+  // }\r\n+// };\r\n+// \r\n+// ======================= BRAINTREE PAYMENT =======================\r\n+// export const brainTreePaymentController = async (req, res) => {\r\n+  // try {\r\n+    // const { cart, nonce } = req.body;\r\n+    // let total = 0;\r\n+    // cart.forEach((item) => {\r\n+      // total += item.price;\r\n+    // });\r\n+// \r\n+    // gateway.transaction.sale(\r\n+      // {\r\n+        // amount: total,\r\n+        // paymentMethodNonce: nonce,\r\n+        // options: {\r\n+          // submitForSettlement: true,\r\n+        // },\r\n+      // },\r\n+      // async function (error, result) {\r\n+        // if (result) {\r\n+          // const order = new orderModel({\r\n+            // products: cart,\r\n+            // payment: result,\r\n+            // buyer: req.user._id, // âœ… Corrected from res.user to req.user\r\n+          // });\r\n+          // await order.save();\r\n+          // res.json({ ok: true });\r\n+        // } else {\r\n+          // res.status(500).send(error);\r\n+        // }\r\n+      // }\r\n+    // );\r\n+  // } catch (error) {\r\n+    // console.error(error);\r\n+    // res.status(500).send({ success: false, message: \"Error processing payment\", error });\r\n+  // }\r\n+// };\r\n+\r\n+\r\n+//razor----\r\n+\r\n+export const razorpayOrderController = async (req, res) => {\r\n+  try {\r\n+    const instance = new Razorpay({\r\n+      key_id: process.env.RAZORPAY_KEY_ID,\r\n+      key_secret: process.env.RAZORPAY_KEY_SECRET,\r\n+    });\r\n+\r\n+    const options = {\r\n+      amount: req.body.amount * 100, // Convert to paise\r\n+      currency: \"INR\",\r\n+      receipt: `receipt_order_${Date.now()}`,\r\n+    };\r\n+\r\n+    const order = await instance.orders.create(options);\r\n+    res.status(200).json(order);\r\n+  } catch (error) {\r\n+    console.error(\"Razorpay order error:\", error);\r\n+    res.status(500).send({ success: false, message: \"Error creating Razorpay order\", error });\r\n+  }\r\n+};\r\n+\r\n+\r\n+//razor--\r\n+export const razorpayVerifyController = async (req, res) => {\r\n+  try {\r\n+    const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\r\n+\r\n+    const sign = razorpay_order_id + \"|\" + razorpay_payment_id;\r\n+    const expectedSign = crypto\r\n+      .createHmac(\"sha256\", process.env.RAZORPAY_SECRET_KEY)\r\n+      .update(sign)\r\n+      .digest(\"hex\");\r\n+\r\n+    const isAuthentic = expectedSign === razorpay_signature;\r\n+\r\n+    if (isAuthentic) {\r\n+      // You can store payment/order in DB if needed\r\n+      res.status(200).json({ success: true, message: \"Payment verified successfully\" });\r\n+    } else {\r\n+      res.status(400).json({ success: false, message: \"Payment verification failed\" });\r\n+    }\r\n+  } catch (error) {\r\n+    console.error(\"Razorpay verify error:\", error);\r\n+    res.status(500).send({ success: false, message: \"Error verifying payment\", error });\r\n+  }\r\n+};\r\n+\r\n+\r\n+// Add Razorpay controllers at bottom of file-----\r\n+export const createRazorpayOrder = async (req, res) => {\r\n+  try {\r\n+    const amount = req.body.amount * 100;\r\n+    const options = { amount, currency: \"INR\", receipt: `rcpt_${Date.now()}` };\r\n+    const order = await razorpay.orders.create(options);\r\n+    res.json(order);\r\n+  } catch (err) {\r\n+    console.error(\"Create Razorpay Order Error:\", err);\r\n+    res.status(500).json({ error: \"Order creation failed\" });\r\n+  }\r\n+};\r\n+\r\n+export const verifyRazorpayPayment = async (req, res) => {\r\n+  const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\r\n+  const sign = `${razorpay_order_id}|${razorpay_payment_id}`;\r\n+  const expectedSign = crypto.createHmac(\"sha256\", process.env.RAZORPAY_SECRET_KEY).update(sign).digest(\"hex\");\r\n+\r\n+  if (expectedSign === razorpay_signature) {\r\n+    res.json({ success: true });\r\n+  } else {\r\n+    res.status(400).json({ error: \"Invalid signature\" });\r\n+  }\r\n+};\r\n+\r\n"
                },
                {
                    "date": 1752869012813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,9 +328,9 @@\n export const razorpayOrderController = async (req, res) => {\r\n   try {\r\n     const instance = new Razorpay({\r\n       key_id: process.env.RAZORPAY_KEY_ID,\r\n-      key_secret: process.env.RAZORPAY_KEY_SECRET,\r\n+      key_secret: process.env.RAZORPAY_SECRET_KEY,\r\n     });\r\n \r\n     const options = {\r\n       amount: req.body.amount * 100, // Convert to paise\r\n@@ -397,404 +397,4 @@\n     res.status(400).json({ error: \"Invalid signature\" });\r\n   }\r\n };\r\n \r\n-import productModel from \"../models/productModel.js\";\r\n-import categoryModel from \"../models/categoryModel.js\";\r\n-import orderModel from \"../models/orderModel.js\"; // âœ… Fixed import\r\n-import fs from \"fs\";\r\n-import slugify from \"slugify\";\r\n-// import braintree from \"braintree\";\r\n-import dotenv from \"dotenv\";\r\n-import Razorpay from \"razorpay\";\r\n-import crypto from \"crypto\";\r\n-\r\n-dotenv.config();\r\n-\r\n-//razorpay--\r\n-const razorpay = new Razorpay({\r\n-  key_id: process.env.RAZORPAY_KEY_ID,\r\n-  key_secret: process.env.RAZORPAY_SECRET_KEY,\r\n-});\r\n-\r\n-// Braintree gateway config\r\n-// const gateway = new braintree.BraintreeGateway({\r\n-  // environment: braintree.Environment.Sandbox,\r\n-  // merchantId: process.env.BRAINTREE_MERCHANT_ID,\r\n-  // publicKey: process.env.BRAINTREE_PUBLIC_KEY,\r\n-  // privateKey: process.env.BRAINTREE_PRIVATE_KEY,\r\n-// });\r\n-\r\n-// ======================= CREATE PRODUCT =======================\r\n-export const createProductController = async (req, res) => {\r\n-  try {\r\n-    const { name, description, price, category, quantity, shipping } = req.fields;\r\n-    const { photo } = req.files;\r\n-\r\n-    switch (true) {\r\n-      case !name:\r\n-        return res.status(400).send({ error: \"Name is required\" });\r\n-      case !description:\r\n-        return res.status(400).send({ error: \"Description is required\" });\r\n-      case !price:\r\n-        return res.status(400).send({ error: \"Price is required\" });\r\n-      case !category:\r\n-        return res.status(400).send({ error: \"Category is required\" });\r\n-      case !quantity:\r\n-        return res.status(400).send({ error: \"Quantity is required\" });\r\n-      case photo && photo.size > 1000000:\r\n-        return res.status(400).send({ error: \"Photo should be less than 1MB\" });\r\n-    }\r\n-\r\n-    const product = new productModel({ ...req.fields, slug: slugify(name) });\r\n-    if (photo) {\r\n-      product.photo.data = fs.readFileSync(photo.path);\r\n-      product.photo.contentType = photo.type;\r\n-    }\r\n-    await product.save();\r\n-\r\n-    res.status(201).send({\r\n-      success: true,\r\n-      message: \"Product created successfully\",\r\n-      product,\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).send({ success: false, error, message: \"Error creating product\" });\r\n-  }\r\n-};\r\n-\r\n-// ======================= GET ALL PRODUCTS =======================\r\n-export const getProductController = async (req, res) => {\r\n-  try {\r\n-    const products = await productModel\r\n-      .find({})\r\n-      .populate(\"category\")\r\n-      .select(\"-photo\")\r\n-      .limit(12)\r\n-      .sort({ createdAt: -1 });\r\n-\r\n-    res.status(200).send({\r\n-      success: true,\r\n-      countTotal: products.length,\r\n-      message: \"All products fetched\",\r\n-      products,\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).send({ success: false, message: \"Error fetching products\", error });\r\n-  }\r\n-};\r\n-\r\n-// ======================= GET SINGLE PRODUCT =======================\r\n-export const getSingleProductController = async (req, res) => {\r\n-  try {\r\n-    const product = await productModel\r\n-      .findOne({ slug: req.params.slug })\r\n-      .select(\"-photo\")\r\n-      .populate(\"category\");\r\n-\r\n-    res.status(200).send({\r\n-      success: true,\r\n-      message: \"Single product fetched\",\r\n-      product,\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).send({ success: false, message: \"Error fetching single product\", error });\r\n-  }\r\n-};\r\n-\r\n-// ======================= PRODUCT PHOTO =======================\r\n-export const productPhotoController = async (req, res) => {\r\n-  try {\r\n-    const product = await productModel.findById(req.params.pid).select(\"photo\");\r\n-    if (product?.photo?.data) {\r\n-      res.set(\"Content-Type\", product.photo.contentType);\r\n-      return res.status(200).send(product.photo.data);\r\n-    }\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).send({ success: false, message: \"Error fetching product photo\", error });\r\n-  }\r\n-};\r\n-\r\n-// ======================= DELETE PRODUCT =======================\r\n-export const deleteProductController = async (req, res) => {\r\n-  try {\r\n-    await productModel.findByIdAndDelete(req.params.pid).select(\"-photo\");\r\n-    res.status(200).send({ success: true, message: \"Product deleted successfully\" });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).send({ success: false, message: \"Error deleting product\", error });\r\n-  }\r\n-};\r\n-\r\n-// ======================= UPDATE PRODUCT =======================\r\n-export const updateProductController = async (req, res) => {\r\n-  try {\r\n-    const { name, description, price, category, quantity, shipping } = req.fields;\r\n-    const { photo } = req.files;\r\n-\r\n-    switch (true) {\r\n-      case !name:\r\n-        return res.status(400).send({ error: \"Name is required\" });\r\n-      case !description:\r\n-        return res.status(400).send({ error: \"Description is required\" });\r\n-      case !price:\r\n-        return res.status(400).send({ error: \"Price is required\" });\r\n-      case !category:\r\n-        return res.status(400).send({ error: \"Category is required\" });\r\n-      case !quantity:\r\n-        return res.status(400).send({ error: \"Quantity is required\" });\r\n-      case photo && photo.size > 1000000:\r\n-        return res.status(400).send({ error: \"Photo should be less than 1MB\" });\r\n-    }\r\n-\r\n-    const product = await productModel.findByIdAndUpdate(\r\n-      req.params.pid,\r\n-      { ...req.fields, slug: slugify(name) },\r\n-      { new: true }\r\n-    );\r\n-\r\n-    if (photo) {\r\n-      product.photo.data = fs.readFileSync(photo.path);\r\n-      product.photo.contentType = photo.type;\r\n-    }\r\n-    await product.save();\r\n-\r\n-    res.status(200).send({\r\n-      success: true,\r\n-      message: \"Product updated successfully\",\r\n-      product,\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(500).send({ success: false, error, message: \"Error updating product\" });\r\n-  }\r\n-};\r\n-\r\n-// ======================= FILTER PRODUCTS =======================\r\n-export const productFiltersController = async (req, res) => {\r\n-  try {\r\n-    const { checked, radio } = req.body;\r\n-    let args = {};\r\n-    if (checked.length > 0) args.category = checked;\r\n-    if (radio.length) args.price = { $gte: radio[0], $lte: radio[1] };\r\n-\r\n-    const products = await productModel.find(args);\r\n-    res.status(200).send({ success: true, products });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(400).send({ success: false, message: \"Error filtering products\", error });\r\n-  }\r\n-};\r\n-\r\n-// ======================= PRODUCT COUNT =======================\r\n-export const productCountController = async (req, res) => {\r\n-  try {\r\n-    const total = await productModel.estimatedDocumentCount();\r\n-    res.status(200).send({ success: true, total });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(400).send({ success: false, message: \"Error counting products\", error });\r\n-  }\r\n-};\r\n-\r\n-// ======================= PAGINATED LIST =======================\r\n-export const productListController = async (req, res) => {\r\n-  try {\r\n-    const perPage = 4;\r\n-    const page = req.params.page ? req.params.page : 1;\r\n-    const products = await productModel\r\n-      .find({})\r\n-      .select(\"-photo\")\r\n-      .skip((page - 1) * perPage)\r\n-      .limit(perPage)\r\n-      .sort({ createdAt: -1 });\r\n-\r\n-    res.status(200).send({ success: true, products });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(400).send({ success: false, message: \"Error with pagination\", error });\r\n-  }\r\n-};\r\n-\r\n-// ======================= SEARCH PRODUCT =======================\r\n-export const searchProductController = async (req, res) => {\r\n-  try {\r\n-    const { keyword } = req.params;\r\n-    const results = await productModel\r\n-      .find({\r\n-        $or: [\r\n-          { name: { $regex: keyword, $options: \"i\" } },\r\n-          { description: { $regex: keyword, $options: \"i\" } },\r\n-        ],\r\n-      })\r\n-      .select(\"-photo\");\r\n-\r\n-    res.status(200).send(results);\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(400).send({ success: false, message: \"Error searching products\", error });\r\n-  }\r\n-};\r\n-\r\n-// ======================= RELATED PRODUCTS =======================\r\n-export const relatedProductController = async (req, res) => {\r\n-  try {\r\n-    const { pid, cid } = req.params;\r\n-    const products = await productModel\r\n-      .find({ category: cid, _id: { $ne: pid } })\r\n-      .select(\"-photo\")\r\n-      .limit(3)\r\n-      .populate(\"category\");\r\n-\r\n-    res.status(200).send({ success: true, products });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(400).send({ success: false, message: \"Error fetching related products\", error });\r\n-  }\r\n-};\r\n-\r\n-// ======================= CATEGORY-WISE PRODUCTS =======================\r\n-export const productCategoryController = async (req, res) => {\r\n-  try {\r\n-    const category = await categoryModel.findOne({ slug: req.params.slug });\r\n-    const products = await productModel.find({ category }).populate(\"category\");\r\n-\r\n-    res.status(200).send({ success: true, category, products });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res.status(400).send({ success: false, message: \"Error fetching category products\", error });\r\n-  }\r\n-};\r\n-\r\n-// ======================= BRAINTREE TOKEN =======================\r\n-// export const braintreeTokenController = async (req, res) => {\r\n-  // try {\r\n-    // gateway.clientToken.generate({}, function (err, response) {\r\n-      // if (err) {\r\n-        // res.status(500).send(err);\r\n-      // } else {\r\n-        // res.send(response);\r\n-      // }\r\n-    // });\r\n-  // } catch (error) {\r\n-    // console.error(error);\r\n-    // res.status(500).send({ success: false, message: \"Error generating token\", error });\r\n-  // }\r\n-// };\r\n-// \r\n-// ======================= BRAINTREE PAYMENT =======================\r\n-// export const brainTreePaymentController = async (req, res) => {\r\n-  // try {\r\n-    // const { cart, nonce } = req.body;\r\n-    // let total = 0;\r\n-    // cart.forEach((item) => {\r\n-      // total += item.price;\r\n-    // });\r\n-// \r\n-    // gateway.transaction.sale(\r\n-      // {\r\n-        // amount: total,\r\n-        // paymentMethodNonce: nonce,\r\n-        // options: {\r\n-          // submitForSettlement: true,\r\n-        // },\r\n-      // },\r\n-      // async function (error, result) {\r\n-        // if (result) {\r\n-          // const order = new orderModel({\r\n-            // products: cart,\r\n-            // payment: result,\r\n-            // buyer: req.user._id, // âœ… Corrected from res.user to req.user\r\n-          // });\r\n-          // await order.save();\r\n-          // res.json({ ok: true });\r\n-        // } else {\r\n-          // res.status(500).send(error);\r\n-        // }\r\n-      // }\r\n-    // );\r\n-  // } catch (error) {\r\n-    // console.error(error);\r\n-    // res.status(500).send({ success: false, message: \"Error processing payment\", error });\r\n-  // }\r\n-// };\r\n-\r\n-\r\n-//razor----\r\n-\r\n-export const razorpayOrderController = async (req, res) => {\r\n-  try {\r\n-    const instance = new Razorpay({\r\n-      key_id: process.env.RAZORPAY_KEY_ID,\r\n-      key_secret: process.env.RAZORPAY_KEY_SECRET,\r\n-    });\r\n-\r\n-    const options = {\r\n-      amount: req.body.amount * 100, // Convert to paise\r\n-      currency: \"INR\",\r\n-      receipt: `receipt_order_${Date.now()}`,\r\n-    };\r\n-\r\n-    const order = await instance.orders.create(options);\r\n-    res.status(200).json(order);\r\n-  } catch (error) {\r\n-    console.error(\"Razorpay order error:\", error);\r\n-    res.status(500).send({ success: false, message: \"Error creating Razorpay order\", error });\r\n-  }\r\n-};\r\n-\r\n-\r\n-//razor--\r\n-export const razorpayVerifyController = async (req, res) => {\r\n-  try {\r\n-    const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\r\n-\r\n-    const sign = razorpay_order_id + \"|\" + razorpay_payment_id;\r\n-    const expectedSign = crypto\r\n-      .createHmac(\"sha256\", process.env.RAZORPAY_KEY_SECRET)\r\n-      .update(sign)\r\n-      .digest(\"hex\");\r\n-\r\n-    const isAuthentic = expectedSign === razorpay_signature;\r\n-\r\n-    if (isAuthentic) {\r\n-      // You can store payment/order in DB if needed\r\n-      res.status(200).json({ success: true, message: \"Payment verified successfully\" });\r\n-    } else {\r\n-      res.status(400).json({ success: false, message: \"Payment verification failed\" });\r\n-    }\r\n-  } catch (error) {\r\n-    console.error(\"Razorpay verify error:\", error);\r\n-    res.status(500).send({ success: false, message: \"Error verifying payment\", error });\r\n-  }\r\n-};\r\n-\r\n-\r\n-// Add Razorpay controllers at bottom of file-----\r\n-export const createRazorpayOrder = async (req, res) => {\r\n-  try {\r\n-    const amount = req.body.amount * 100;\r\n-    const options = { amount, currency: \"INR\", receipt: `rcpt_${Date.now()}` };\r\n-    const order = await razorpay.orders.create(options);\r\n-    res.json(order);\r\n-  } catch (err) {\r\n-    console.error(\"Create Razorpay Order Error:\", err);\r\n-    res.status(500).json({ error: \"Order creation failed\" });\r\n-  }\r\n-};\r\n-\r\n-export const verifyRazorpayPayment = async (req, res) => {\r\n-  const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\r\n-  const sign = `${razorpay_order_id}|${razorpay_payment_id}`;\r\n-  const expectedSign = crypto.createHmac(\"sha256\", process.env.RAZORPAY_KEY_SECRET).update(sign).digest(\"hex\");\r\n-\r\n-  if (expectedSign === razorpay_signature) {\r\n-    res.json({ success: true });\r\n-  } else {\r\n-    res.status(400).json({ error: \"Invalid signature\" });\r\n-  }\r\n-};\r\n-\r\n"
                }
            ],
            "date": 1752852643015,
            "name": "Commit-0",
            "content": "import productModel from \"../models/productModel.js\";\r\nimport categoryModel from \"../models/categoryModel.js\";\r\nimport orderModel from \"../models/orderModel.js\"; // âœ… Fixed import\r\nimport fs from \"fs\";\r\nimport slugify from \"slugify\";\r\n// import braintree from \"braintree\";\r\nimport dotenv from \"dotenv\";\r\n\r\ndotenv.config();\r\n\r\n// Braintree gateway config\r\n// const gateway = new braintree.BraintreeGateway({\r\n  // environment: braintree.Environment.Sandbox,\r\n  // merchantId: process.env.BRAINTREE_MERCHANT_ID,\r\n  // publicKey: process.env.BRAINTREE_PUBLIC_KEY,\r\n  // privateKey: process.env.BRAINTREE_PRIVATE_KEY,\r\n// });\r\n\r\n// ======================= CREATE PRODUCT =======================\r\nexport const createProductController = async (req, res) => {\r\n  try {\r\n    const { name, description, price, category, quantity, shipping } = req.fields;\r\n    const { photo } = req.files;\r\n\r\n    switch (true) {\r\n      case !name:\r\n        return res.status(400).send({ error: \"Name is required\" });\r\n      case !description:\r\n        return res.status(400).send({ error: \"Description is required\" });\r\n      case !price:\r\n        return res.status(400).send({ error: \"Price is required\" });\r\n      case !category:\r\n        return res.status(400).send({ error: \"Category is required\" });\r\n      case !quantity:\r\n        return res.status(400).send({ error: \"Quantity is required\" });\r\n      case photo && photo.size > 1000000:\r\n        return res.status(400).send({ error: \"Photo should be less than 1MB\" });\r\n    }\r\n\r\n    const product = new productModel({ ...req.fields, slug: slugify(name) });\r\n    if (photo) {\r\n      product.photo.data = fs.readFileSync(photo.path);\r\n      product.photo.contentType = photo.type;\r\n    }\r\n    await product.save();\r\n\r\n    res.status(201).send({\r\n      success: true,\r\n      message: \"Product created successfully\",\r\n      product,\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send({ success: false, error, message: \"Error creating product\" });\r\n  }\r\n};\r\n\r\n// ======================= GET ALL PRODUCTS =======================\r\nexport const getProductController = async (req, res) => {\r\n  try {\r\n    const products = await productModel\r\n      .find({})\r\n      .populate(\"category\")\r\n      .select(\"-photo\")\r\n      .limit(12)\r\n      .sort({ createdAt: -1 });\r\n\r\n    res.status(200).send({\r\n      success: true,\r\n      countTotal: products.length,\r\n      message: \"All products fetched\",\r\n      products,\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send({ success: false, message: \"Error fetching products\", error });\r\n  }\r\n};\r\n\r\n// ======================= GET SINGLE PRODUCT =======================\r\nexport const getSingleProductController = async (req, res) => {\r\n  try {\r\n    const product = await productModel\r\n      .findOne({ slug: req.params.slug })\r\n      .select(\"-photo\")\r\n      .populate(\"category\");\r\n\r\n    res.status(200).send({\r\n      success: true,\r\n      message: \"Single product fetched\",\r\n      product,\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send({ success: false, message: \"Error fetching single product\", error });\r\n  }\r\n};\r\n\r\n// ======================= PRODUCT PHOTO =======================\r\nexport const productPhotoController = async (req, res) => {\r\n  try {\r\n    const product = await productModel.findById(req.params.pid).select(\"photo\");\r\n    if (product?.photo?.data) {\r\n      res.set(\"Content-Type\", product.photo.contentType);\r\n      return res.status(200).send(product.photo.data);\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send({ success: false, message: \"Error fetching product photo\", error });\r\n  }\r\n};\r\n\r\n// ======================= DELETE PRODUCT =======================\r\nexport const deleteProductController = async (req, res) => {\r\n  try {\r\n    await productModel.findByIdAndDelete(req.params.pid).select(\"-photo\");\r\n    res.status(200).send({ success: true, message: \"Product deleted successfully\" });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send({ success: false, message: \"Error deleting product\", error });\r\n  }\r\n};\r\n\r\n// ======================= UPDATE PRODUCT =======================\r\nexport const updateProductController = async (req, res) => {\r\n  try {\r\n    const { name, description, price, category, quantity, shipping } = req.fields;\r\n    const { photo } = req.files;\r\n\r\n    switch (true) {\r\n      case !name:\r\n        return res.status(400).send({ error: \"Name is required\" });\r\n      case !description:\r\n        return res.status(400).send({ error: \"Description is required\" });\r\n      case !price:\r\n        return res.status(400).send({ error: \"Price is required\" });\r\n      case !category:\r\n        return res.status(400).send({ error: \"Category is required\" });\r\n      case !quantity:\r\n        return res.status(400).send({ error: \"Quantity is required\" });\r\n      case photo && photo.size > 1000000:\r\n        return res.status(400).send({ error: \"Photo should be less than 1MB\" });\r\n    }\r\n\r\n    const product = await productModel.findByIdAndUpdate(\r\n      req.params.pid,\r\n      { ...req.fields, slug: slugify(name) },\r\n      { new: true }\r\n    );\r\n\r\n    if (photo) {\r\n      product.photo.data = fs.readFileSync(photo.path);\r\n      product.photo.contentType = photo.type;\r\n    }\r\n    await product.save();\r\n\r\n    res.status(200).send({\r\n      success: true,\r\n      message: \"Product updated successfully\",\r\n      product,\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send({ success: false, error, message: \"Error updating product\" });\r\n  }\r\n};\r\n\r\n// ======================= FILTER PRODUCTS =======================\r\nexport const productFiltersController = async (req, res) => {\r\n  try {\r\n    const { checked, radio } = req.body;\r\n    let args = {};\r\n    if (checked.length > 0) args.category = checked;\r\n    if (radio.length) args.price = { $gte: radio[0], $lte: radio[1] };\r\n\r\n    const products = await productModel.find(args);\r\n    res.status(200).send({ success: true, products });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(400).send({ success: false, message: \"Error filtering products\", error });\r\n  }\r\n};\r\n\r\n// ======================= PRODUCT COUNT =======================\r\nexport const productCountController = async (req, res) => {\r\n  try {\r\n    const total = await productModel.estimatedDocumentCount();\r\n    res.status(200).send({ success: true, total });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(400).send({ success: false, message: \"Error counting products\", error });\r\n  }\r\n};\r\n\r\n// ======================= PAGINATED LIST =======================\r\nexport const productListController = async (req, res) => {\r\n  try {\r\n    const perPage = 4;\r\n    const page = req.params.page ? req.params.page : 1;\r\n    const products = await productModel\r\n      .find({})\r\n      .select(\"-photo\")\r\n      .skip((page - 1) * perPage)\r\n      .limit(perPage)\r\n      .sort({ createdAt: -1 });\r\n\r\n    res.status(200).send({ success: true, products });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(400).send({ success: false, message: \"Error with pagination\", error });\r\n  }\r\n};\r\n\r\n// ======================= SEARCH PRODUCT =======================\r\nexport const searchProductController = async (req, res) => {\r\n  try {\r\n    const { keyword } = req.params;\r\n    const results = await productModel\r\n      .find({\r\n        $or: [\r\n          { name: { $regex: keyword, $options: \"i\" } },\r\n          { description: { $regex: keyword, $options: \"i\" } },\r\n        ],\r\n      })\r\n      .select(\"-photo\");\r\n\r\n    res.status(200).send(results);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(400).send({ success: false, message: \"Error searching products\", error });\r\n  }\r\n};\r\n\r\n// ======================= RELATED PRODUCTS =======================\r\nexport const relatedProductController = async (req, res) => {\r\n  try {\r\n    const { pid, cid } = req.params;\r\n    const products = await productModel\r\n      .find({ category: cid, _id: { $ne: pid } })\r\n      .select(\"-photo\")\r\n      .limit(3)\r\n      .populate(\"category\");\r\n\r\n    res.status(200).send({ success: true, products });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(400).send({ success: false, message: \"Error fetching related products\", error });\r\n  }\r\n};\r\n\r\n// ======================= CATEGORY-WISE PRODUCTS =======================\r\nexport const productCategoryController = async (req, res) => {\r\n  try {\r\n    const category = await categoryModel.findOne({ slug: req.params.slug });\r\n    const products = await productModel.find({ category }).populate(\"category\");\r\n\r\n    res.status(200).send({ success: true, category, products });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(400).send({ success: false, message: \"Error fetching category products\", error });\r\n  }\r\n};\r\n\r\n// ======================= BRAINTREE TOKEN =======================\r\n// export const braintreeTokenController = async (req, res) => {\r\n  // try {\r\n    // gateway.clientToken.generate({}, function (err, response) {\r\n      // if (err) {\r\n        // res.status(500).send(err);\r\n      // } else {\r\n        // res.send(response);\r\n      // }\r\n    // });\r\n  // } catch (error) {\r\n    // console.error(error);\r\n    // res.status(500).send({ success: false, message: \"Error generating token\", error });\r\n  // }\r\n// };\r\n// \r\n// ======================= BRAINTREE PAYMENT =======================\r\n// export const brainTreePaymentController = async (req, res) => {\r\n  // try {\r\n    // const { cart, nonce } = req.body;\r\n    // let total = 0;\r\n    // cart.forEach((item) => {\r\n      // total += item.price;\r\n    // });\r\n// \r\n    // gateway.transaction.sale(\r\n      // {\r\n        // amount: total,\r\n        // paymentMethodNonce: nonce,\r\n        // options: {\r\n          // submitForSettlement: true,\r\n        // },\r\n      // },\r\n      // async function (error, result) {\r\n        // if (result) {\r\n          // const order = new orderModel({\r\n            // products: cart,\r\n            // payment: result,\r\n            // buyer: req.user._id, // âœ… Corrected from res.user to req.user\r\n          // });\r\n          // await order.save();\r\n          // res.json({ ok: true });\r\n        // } else {\r\n          // res.status(500).send(error);\r\n        // }\r\n      // }\r\n    // );\r\n  // } catch (error) {\r\n    // console.error(error);\r\n    // res.status(500).send({ success: false, message: \"Error processing payment\", error });\r\n  // }\r\n// };\r\n"
        }
    ]
}