{
    "sourceFile": "client/src/pages/CartPage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1752853210577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752853373058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import Layout from \"../components/Layouts/Layout\";\r\n import { useCart } from \"../context/cart\";\r\n import { useAuth } from \"../context/auth\";\r\n import { useNavigate } from \"react-router-dom\";\r\n-// import DropIn from \"braintree-web-drop-in-react\";\r\n+import DropIn from \"braintree-web-drop-in-react\";\r\n import { AiFillWarning } from \"react-icons/ai\";\r\n import axios from \"axios\";\r\n import toast from \"react-hot-toast\";\r\n import \"../styles/CartStyles.css\";\r\n"
                },
                {
                    "date": 1752860889962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,20 +2,20 @@\n import Layout from \"../components/Layouts/Layout\";\r\n import { useCart } from \"../context/cart\";\r\n import { useAuth } from \"../context/auth\";\r\n import { useNavigate } from \"react-router-dom\";\r\n-import DropIn from \"braintree-web-drop-in-react\";\r\n-import { AiFillWarning } from \"react-icons/ai\";\r\n+// import DropIn from \"braintree-web-drop-in-react\";\r\n import axios from \"axios\";\r\n import toast from \"react-hot-toast\";\r\n import \"../styles/CartStyles.css\";\r\n+import { AiFillWarning } from \"react-icons/ai\";\r\n \r\n const CartPage = () => {\r\n   const [auth] = useAuth();\r\n   const [cart, setCart] = useCart();\r\n-  const [clientToken, setClientToken] = useState(\"\");\r\n-  const [instance, setInstance] = useState(null);\r\n-  const [loading, setLoading] = useState(false);\r\n+  // const [clientToken, setClientToken] = useState(\"\");\r\n+  // const [instance, setInstance] = useState(null);\r\n+  // const [loading, setLoading] = useState(false);\r\n   const navigate = useNavigate();\r\n \r\n   // Calculate total cart price\r\n   const totalPrice = () => {\r\n@@ -42,54 +42,100 @@\n     }\r\n   };\r\n \r\n   // Fetch client token for Braintree\r\n-  const getToken = async () => {\r\n-    try {\r\n-      const { data } = await axios.get(\"/api/v1/product/braintree/token\");\r\n-      if (data?.clientToken) {\r\n-        setClientToken(data.clientToken);\r\n-      } else {\r\n-        toast.error(\"Failed to load payment gateway. Try again.\");\r\n-      }\r\n-    } catch (error) {\r\n-      console.error(\"Error fetching Braintree token:\", error);\r\n-      toast.error(\"Failed to load payment gateway. Try again.\");\r\n-    }\r\n-  };\r\n+  // const getToken = async () => {\r\n+    // try {\r\n+      // const { data } = await axios.get(\"/api/v1/product/braintree/token\");\r\n+      // if (data?.clientToken) {\r\n+        // setClientToken(data.clientToken);\r\n+      // } else {\r\n+        // toast.error(\"Failed to load payment gateway. Try again.\");\r\n+      // }\r\n+    // } catch (error) {\r\n+      // console.error(\"Error fetching Braintree token:\", error);\r\n+      // toast.error(\"Failed to load payment gateway. Try again.\");\r\n+    // }\r\n+  // };\r\n \r\n-  useEffect(() => {\r\n-    if (auth?.token) getToken();\r\n-  }, [auth?.token]);\r\n+  // useEffect(() => {\r\n+    // if (auth?.token) getToken();\r\n+  // }, [auth?.token]);\r\n \r\n-  // Handle payment\r\n-  const handlePayment = async () => {\r\n-    if (!instance) {\r\n-      toast.error(\"Payment UI not loaded. Try again.\");\r\n-      return;\r\n-    }\r\n \r\n-    try {\r\n-      setLoading(true);\r\n-      const { nonce } = await instance.requestPaymentMethod();\r\n \r\n-      const { data } = await axios.post(\"/api/v1/product/braintree/payment\", {\r\n-        nonce,\r\n-        cart,\r\n-      });\r\n+  // Handle payment---\r\n \r\n-      setLoading(false);\r\n-      setCart([]);\r\n-      localStorage.removeItem(\"cart\");\r\n-      toast.success(\"Payment Completed Successfully!\");\r\n-      navigate(\"/dashboard/user/orders\");\r\n-    } catch (error) {\r\n-      console.error(\"Payment error:\", error);\r\n-      toast.error(\"Payment failed. Try again.\");\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n+  // const handlePayment = async () => {\r\n+    // if (!instance) {\r\n+      // toast.error(\"Payment UI not loaded. Try again.\");\r\n+      // return;\r\n+    // }\r\n \r\n+    // try {\r\n+      // setLoading(true);\r\n+      // const { nonce } = await instance.requestPaymentMethod();\r\n+\r\n+      // const { data } = await axios.post(\"/api/v1/product/braintree/payment\", {\r\n+        // nonce,\r\n+        // cart,\r\n+      // });\r\n+\r\n+      // setLoading(false);\r\n+      // setCart([]);\r\n+      // localStorage.removeItem(\"cart\");\r\n+      // toast.success(\"Payment Completed Successfully!\");\r\n+      // navigate(\"/dashboard/user/orders\");\r\n+    // } catch (error) {\r\n+      // console.error(\"Payment error:\", error);\r\n+      // toast.error(\"Payment failed. Try again.\");\r\n+      // setLoading(false);\r\n+    // }\r\n+  // };\r\n+\r\n+\r\n+  //handle payment for razorpay----\r\n+\r\n+const handlePayment = async () => {\r\n+  try {\r\n+    const { data } = await axios.post(`${process.env.REACT_APP_API}/api/v1/payment/create-order`, {\r\n+      amount: cart.reduce((acc, item) => acc + item.price, 0)\r\n+    });\r\n+\r\n+    const options = {\r\n+      key: process.env.REACT_APP_RAZORPAY_KEY,\r\n+      amount: data.order.amount,\r\n+      currency: \"INR\",\r\n+      name: \"Aranya\",\r\n+      description: \"Order Payment\",\r\n+      order_id: data.order.id,\r\n+      handler: function (response) {\r\n+        toast.success(\"Payment Successful!\");\r\n+        console.log(response);\r\n+        setCart([]);\r\n+        localStorage.removeItem(\"cart\");\r\n+        navigate(\"/dashboard/user/orders\");\r\n+      },\r\n+      prefill: {\r\n+        name: auth?.user?.name,\r\n+        email: auth?.user?.email,\r\n+        contact: \"9999999999\"\r\n+      },\r\n+      theme: {\r\n+        color: \"#3399cc\"\r\n+      }\r\n+    };\r\n+\r\n+    const razor = new window.Razorpay(options);\r\n+    razor.open();\r\n+\r\n+  } catch (error) {\r\n+    console.log(error);\r\n+    toast.error(\"Payment Failed!\");\r\n+  }\r\n+};\r\n+\r\n+\r\n   return (\r\n     <Layout>\r\n       <div className=\"cart-page container\">\r\n         <div className=\"row\">\r\n@@ -170,34 +216,53 @@\n               </div>\r\n             )}\r\n \r\n             {/* Braintree Payment DropIn */}\r\n-            {clientToken && cart?.length > 0 && auth?.token ? (\r\n-              <div className=\"mt-3\">\r\n-                <DropIn\r\n-                  options={{\r\n-                    authorization: clientToken,\r\n-                    paypal: { flow: \"vault\" },\r\n-                  }}\r\n-                  onInstance={(instance) => setInstance(instance)}\r\n-                />\r\n-                <button\r\n-                  className=\"btn btn-primary mt-3\"\r\n-                  onClick={handlePayment}\r\n-                  disabled={loading || !instance}\r\n-                >\r\n-                  {loading ? \"Processing...\" : \"Make Payment\"}\r\n-                </button>\r\n-              </div>\r\n+            {/* {clientToken && cart?.length > 0 && auth?.token ? ( \r\n+              {/* // <div className=\"mt-3\"> */}\r\n+                {/* // <DropIn \r\n+                  // options={{\r\n+                    */}\r\n+                    {/* authorization: clientToken,\r\n+                    // paypal: { flow: \"vault\" },\r\n+                  // }}\r\n+                  // onInstance={(instance) => setInstance(instance)}\r\n+                // />*/}\r\n+                 {/* <button */}\r\n+                  {/* // className=\"btn btn-primary mt-3\" */}\r\n+                  {/* // onClick={handlePayment} */}\r\n+                  {/* // disabled={loading || !instance} */}\r\n+                {/* // > */}\r\n+                  {/* // {loading ? \"Processing...\" : \"Make Payment\"} */}\r\n+                {/* // </button> */}\r\n+              {/* // </div> */}\r\n+            {/* // ) : ( */}\r\n+              {/* // <div className=\"text-danger mt-3\"> */}\r\n+                {/* // <AiFillWarning size={20} /> Payment system not ready */}\r\n+              {/* // </div> */}\r\n+            {/* // )} */}\r\n+          {/* // </div> */}\r\n+        {/* // </div> */}\r\n+      {/* // </div> */}\r\n+      {/* } */}\r\n+\r\n+\r\n+      {/* Razorpay Payment Button */}\r\n+            {cart?.length > 0 && auth?.token ? (\r\n+              <button className=\"btn btn-primary mt-3\" onClick={handlePayment}>\r\n+                Pay via Razorpay\r\n+              </button>\r\n             ) : (\r\n               <div className=\"text-danger mt-3\">\r\n                 <AiFillWarning size={20} /> Payment system not ready\r\n               </div>\r\n             )}\r\n           </div>\r\n         </div>\r\n       </div>\r\n-    </Layout>\r\n-  );\r\n-};\r\n \r\n-export default CartPage;\r\n+      \r\n+     </Layout>\r\n+   );\r\n+ };\r\n+\r\n+ export default CartPage;\r\n"
                },
                {
                    "date": 1752862895859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,44 +94,79 @@\n \r\n \r\n   //handle payment for razorpay----\r\n \r\n-const handlePayment = async () => {\r\n+// const handlePayment = async () => {\r\n+  // try {\r\n+    // const { data } = await axios.post(`${process.env.REACT_APP_API}/api/v1/payment/create-order`, {\r\n+      // amount: cart.reduce((acc, item) => acc + item.price, 0)\r\n+    // });\r\n+// \r\n+    // const options = {\r\n+      // key: process.env.REACT_APP_RAZORPAY_KEY,\r\n+      // amount: data.order.amount,\r\n+      // currency: \"INR\",\r\n+      // name: \"Aranya\",\r\n+      // description: \"Order Payment\",\r\n+      // order_id: data.order.id,\r\n+      // handler: function (response) {\r\n+        // toast.success(\"Payment Successful!\");\r\n+        // console.log(response);\r\n+        // setCart([]);\r\n+        // localStorage.removeItem(\"cart\");\r\n+        // navigate(\"/dashboard/user/orders\");\r\n+      // },\r\n+      // prefill: {\r\n+        // name: auth?.user?.name,\r\n+        // email: auth?.user?.email,\r\n+        // contact: \"9999999999\"\r\n+      // },\r\n+      // theme: {\r\n+        // color: \"#3399cc\"\r\n+      // }\r\n+    // };\r\n+// \r\n+    // const razor = new window.Razorpay(options);\r\n+    // razor.open();\r\n+// \r\n+  // } catch (error) {\r\n+    // console.log(error);\r\n+    // toast.error(\"Payment Failed!\");\r\n+  // }\r\n+// };\r\n+\r\n+\r\n+\r\n+const handleRazorpay = async () => {\r\n   try {\r\n-    const { data } = await axios.post(`${process.env.REACT_APP_API}/api/v1/payment/create-order`, {\r\n-      amount: cart.reduce((acc, item) => acc + item.price, 0)\r\n-    });\r\n+    const amt = cart.reduce((acc, p) => acc + p.price, 0);\r\n+    const { data: order } = await axios.post(\"/api/v1/product/razorpay/create-order\", { amount: amt });\r\n \r\n     const options = {\r\n       key: process.env.REACT_APP_RAZORPAY_KEY,\r\n-      amount: data.order.amount,\r\n-      currency: \"INR\",\r\n-      name: \"Aranya\",\r\n-      description: \"Order Payment\",\r\n-      order_id: data.order.id,\r\n-      handler: function (response) {\r\n-        toast.success(\"Payment Successful!\");\r\n-        console.log(response);\r\n-        setCart([]);\r\n-        localStorage.removeItem(\"cart\");\r\n-        navigate(\"/dashboard/user/orders\");\r\n+      amount: order.amount,\r\n+      currency: order.currency,\r\n+      name: \"Sarvija Store\",\r\n+      order_id: order.id,\r\n+      handler: async (res) => {\r\n+        const verifyRes = await axios.post(\"/api/v1/product/razorpay/verify\", res);\r\n+        if (verifyRes.data.success) {\r\n+          toast.success(\"Payment successful!\");\r\n+          localStorage.removeItem(\"cart\");\r\n+          setCart([]);\r\n+          navigate(\"/dashboard/user/orders\");\r\n+        } else {\r\n+          toast.error(\"Payment verification failed.\");\r\n+        }\r\n       },\r\n-      prefill: {\r\n-        name: auth?.user?.name,\r\n-        email: auth?.user?.email,\r\n-        contact: \"9999999999\"\r\n-      },\r\n-      theme: {\r\n-        color: \"#3399cc\"\r\n-      }\r\n+      theme: { color: \"#3399cc\" },\r\n     };\r\n \r\n-    const razor = new window.Razorpay(options);\r\n-    razor.open();\r\n-\r\n-  } catch (error) {\r\n-    console.log(error);\r\n-    toast.error(\"Payment Failed!\");\r\n+    const rzp = new window.Razorpay(options);\r\n+    rzp.open();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    toast.error(\"Payment failed to initiate.\");\r\n   }\r\n };\r\n \r\n \r\n@@ -259,9 +294,9 @@\n           </div>\r\n         </div>\r\n       </div>\r\n \r\n-      \r\n+\r\n      </Layout>\r\n    );\r\n  };\r\n \r\n"
                },
                {
                    "date": 1752867055398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   // const [instance, setInstance] = useState(null);\r\n   // const [loading, setLoading] = useState(false);\r\n   const navigate = useNavigate();\r\n \r\n-  // Calculate total cart price\r\n+  // Calculate total cart price-----\r\n   const totalPrice = () => {\r\n     try {\r\n       const total = cart?.reduce((acc, item) => acc + item.price, 0);\r\n       return total.toLocaleString(\"en-IN\", {\r\n@@ -30,9 +30,10 @@\n       return \"₹0\";\r\n     }\r\n   };\r\n \r\n-  // Remove item from cart\r\n+\r\n+  // Remove item from cart--\r\n   const removeCartItem = (pid) => {\r\n     try {\r\n       const updatedCart = cart.filter((item) => item._id !== pid);\r\n       setCart(updatedCart);\r\n@@ -41,8 +42,9 @@\n       console.error(\"Error removing cart item:\", error);\r\n     }\r\n   };\r\n \r\n+\r\n   // Fetch client token for Braintree\r\n   // const getToken = async () => {\r\n     // try {\r\n       // const { data } = await axios.get(\"/api/v1/product/braintree/token\");\r\n@@ -134,43 +136,44 @@\n   // }\r\n // };\r\n \r\n \r\n-\r\n const handleRazorpay = async () => {\r\n   try {\r\n-    const amt = cart.reduce((acc, p) => acc + p.price, 0);\r\n-    const { data: order } = await axios.post(\"/api/v1/product/razorpay/create-order\", { amount: amt });\r\n+    const amount = cart.reduce((acc, item) => acc + item.price, 0);\r\n+    const { data: order } = await axios.post(\"/api/v1/product/razorpay/create-order\", { amount });\r\n \r\n     const options = {\r\n-      key: process.env.REACT_APP_RAZORPAY_KEY,\r\n+      key: process.env.REACT_APP_RAZORPAY_KEY, // Make sure to add this in your frontend .env\r\n       amount: order.amount,\r\n       currency: order.currency,\r\n       name: \"Sarvija Store\",\r\n+      description: \"Order Payment\",\r\n       order_id: order.id,\r\n-      handler: async (res) => {\r\n-        const verifyRes = await axios.post(\"/api/v1/product/razorpay/verify\", res);\r\n-        if (verifyRes.data.success) {\r\n-          toast.success(\"Payment successful!\");\r\n+      handler: async (response) => {\r\n+        const verify = await axios.post(\"/api/v1/product/razorpay/verify\", response);\r\n+        if (verify.data.success) {\r\n+          toast.success(\"Payment Successful!\");\r\n+          setCart([]);\r\n           localStorage.removeItem(\"cart\");\r\n-          setCart([]);\r\n           navigate(\"/dashboard/user/orders\");\r\n         } else {\r\n           toast.error(\"Payment verification failed.\");\r\n         }\r\n       },\r\n-      theme: { color: \"#3399cc\" },\r\n+      theme: { color: \"#0a9396\" },\r\n     };\r\n \r\n-    const rzp = new window.Razorpay(options);\r\n-    rzp.open();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    toast.error(\"Payment failed to initiate.\");\r\n+    const razor = new window.Razorpay(options);\r\n+    razor.open();\r\n+  } catch (error) {\r\n+    console.error(\"Razorpay Error:\", error);\r\n+    toast.error(\"Payment failed.\");\r\n   }\r\n };\r\n \r\n \r\n+\r\n   return (\r\n     <Layout>\r\n       <div className=\"cart-page container\">\r\n         <div className=\"row\">\r\n@@ -274,14 +277,9 @@\n               {/* // <div className=\"text-danger mt-3\"> */}\r\n                 {/* // <AiFillWarning size={20} /> Payment system not ready */}\r\n               {/* // </div> */}\r\n             {/* // )} */}\r\n-          {/* // </div> */}\r\n-        {/* // </div> */}\r\n-      {/* // </div> */}\r\n-      {/* } */}\r\n-\r\n-\r\n+  \r\n       {/* Razorpay Payment Button */}\r\n             {cart?.length > 0 && auth?.token ? (\r\n               <button className=\"btn btn-primary mt-3\" onClick={handlePayment}>\r\n                 Pay via Razorpay\r\n@@ -293,11 +291,14 @@\n             )}\r\n           </div>\r\n         </div>\r\n       </div>\r\n-\r\n-\r\n      </Layout>\r\n    );\r\n  };\r\n \r\n  export default CartPage;\r\n+\r\n+\r\n+\r\n+\r\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752868464876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n // import DropIn from \"braintree-web-drop-in-react\";\r\n import axios from \"axios\";\r\n import toast from \"react-hot-toast\";\r\n import \"../styles/CartStyles.css\";\r\n-import { AiFillWarning } from \"react-icons/ai\";\r\n+// import { AiFillWarning } from \"react-icons/ai\";\r\n \r\n const CartPage = () => {\r\n   const [auth] = useAuth();\r\n   const [cart, setCart] = useCart();\r\n@@ -136,44 +136,66 @@\n   // }\r\n // };\r\n \r\n \r\n-const handleRazorpay = async () => {\r\n+useEffect(() => {\r\n+  const script = document.createElement(\"script\");\r\n+  script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n+  script.async = true;\r\n+  document.body.appendChild(script);\r\n+}, []);\r\n+\r\n+\r\n+//handlerazorpay---\r\n+const handleRazorpayPayment = async () => {\r\n   try {\r\n     const amount = cart.reduce((acc, item) => acc + item.price, 0);\r\n-    const { data: order } = await axios.post(\"/api/v1/product/razorpay/create-order\", { amount });\r\n \r\n+    const { data: order } = await axios.post(\"/api/v1/product/razorpay/order\", {\r\n+      amount,\r\n+    });\r\n+\r\n     const options = {\r\n-      key: process.env.REACT_APP_RAZORPAY_KEY, // Make sure to add this in your frontend .env\r\n+      key: process.env.REACT_APP_RAZORPAY_KEY_ID,\r\n       amount: order.amount,\r\n       currency: order.currency,\r\n-      name: \"Sarvija Store\",\r\n-      description: \"Order Payment\",\r\n+      name: \"Aranya E-commerce\",\r\n+      description: \"Test Transaction\",\r\n       order_id: order.id,\r\n-      handler: async (response) => {\r\n-        const verify = await axios.post(\"/api/v1/product/razorpay/verify\", response);\r\n-        if (verify.data.success) {\r\n-          toast.success(\"Payment Successful!\");\r\n+      handler: async function (response) {\r\n+        const verifyRes = await axios.post(\"/api/v1/product/razorpay/verify\", {\r\n+          razorpay_order_id: response.razorpay_order_id,\r\n+          razorpay_payment_id: response.razorpay_payment_id,\r\n+          razorpay_signature: response.razorpay_signature,\r\n+        });\r\n+\r\n+        if (verifyRes.data.success) {\r\n           setCart([]);\r\n           localStorage.removeItem(\"cart\");\r\n+          toast.success(\"Payment successful!\");\r\n           navigate(\"/dashboard/user/orders\");\r\n         } else {\r\n-          toast.error(\"Payment verification failed.\");\r\n+          toast.error(\"Payment verification failed\");\r\n         }\r\n       },\r\n-      theme: { color: \"#0a9396\" },\r\n+      prefill: {\r\n+        name: auth?.user?.name,\r\n+        email: auth?.user?.email,\r\n+        contact: \"9999999999\",\r\n+      },\r\n+      theme: {\r\n+        color: \"#3399cc\",\r\n+      },\r\n     };\r\n \r\n-    const razor = new window.Razorpay(options);\r\n-    razor.open();\r\n+    const rzp = new window.Razorpay(options);\r\n+    rzp.open();\r\n   } catch (error) {\r\n-    console.error(\"Razorpay Error:\", error);\r\n-    toast.error(\"Payment failed.\");\r\n+    console.error(\"Razorpay error:\", error);\r\n+    toast.error(\"Payment failed. Try again.\");\r\n   }\r\n };\r\n \r\n-\r\n-\r\n   return (\r\n     <Layout>\r\n       <div className=\"cart-page container\">\r\n         <div className=\"row\">\r\n@@ -279,17 +301,21 @@\n               {/* // </div> */}\r\n             {/* // )} */}\r\n   \r\n       {/* Razorpay Payment Button */}\r\n-            {cart?.length > 0 && auth?.token ? (\r\n-              <button className=\"btn btn-primary mt-3\" onClick={handlePayment}>\r\n-                Pay via Razorpay\r\n-              </button>\r\n-            ) : (\r\n-              <div className=\"text-danger mt-3\">\r\n-                <AiFillWarning size={20} /> Payment system not ready\r\n-              </div>\r\n-            )}\r\n+      {cart?.length > 0 && auth?.token ? (\r\n+  <button\r\n+    className=\"btn btn-primary mt-3\"\r\n+    onClick={handleRazorpayPayment}\r\n+  >\r\n+    Make Payment\r\n+  </button>\r\n+) : (\r\n+  <div className=\"text-danger mt-3\">\r\n+    Please login or add items to cart to proceed.\r\n+  </div>\r\n+)}\r\n+\r\n           </div>\r\n         </div>\r\n       </div>\r\n      </Layout>\r\n"
                },
                {
                    "date": 1752868739923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n       amount,\r\n     });\r\n \r\n     const options = {\r\n-      key: process.env.REACT_APP_RAZORPAY_KEY_ID,\r\n+      key: process.env.REACT_APP_RAZORPAY_KEY,\r\n       amount: order.amount,\r\n       currency: order.currency,\r\n       name: \"Aranya E-commerce\",\r\n       description: \"Test Transaction\",\r\n"
                },
                {
                    "date": 1752956424926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,330 @@\n+import React, { useState, useEffect } from \"react\";\r\n+import Layout from \"../components/Layouts/Layout\";\r\n+import { useCart } from \"../context/cart\";\r\n+import { useAuth } from \"../context/auth\";\r\n+import { useNavigate } from \"react-router-dom\";\r\n+// import DropIn from \"braintree-web-drop-in-react\";\r\n+import axios from \"axios\";\r\n+import toast from \"react-hot-toast\";\r\n+import \"../styles/CartStyles.css\";\r\n+// import { AiFillWarning } from \"react-icons/ai\";\r\n+\r\n+const CartPage = () => {\r\n+  const [auth] = useAuth();\r\n+  const [cart, setCart] = useCart();\r\n+  // const [clientToken, setClientToken] = useState(\"\");\r\n+  // const [instance, setInstance] = useState(null);\r\n+  // const [loading, setLoading] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  // Calculate total cart price-----\r\n+  const totalPrice = () => {\r\n+    try {\r\n+      const total = cart?.reduce((acc, item) => acc + item.price, 0);\r\n+      return total.toLocaleString(\"en-IN\", {\r\n+        style: \"currency\",\r\n+        currency: \"INR\",\r\n+      });\r\n+    } catch (error) {\r\n+      console.error(\"Error calculating total price:\", error);\r\n+      return \"₹0\";\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  // Remove item from cart--\r\n+  const removeCartItem = (pid) => {\r\n+    try {\r\n+      const updatedCart = cart.filter((item) => item._id !== pid);\r\n+      setCart(updatedCart);\r\n+      localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\r\n+    } catch (error) {\r\n+      console.error(\"Error removing cart item:\", error);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  // Fetch client token for Braintree\r\n+  // const getToken = async () => {\r\n+    // try {\r\n+      // const { data } = await axios.get(\"/api/v1/product/braintree/token\");\r\n+      // if (data?.clientToken) {\r\n+        // setClientToken(data.clientToken);\r\n+      // } else {\r\n+        // toast.error(\"Failed to load payment gateway. Try again.\");\r\n+      // }\r\n+    // } catch (error) {\r\n+      // console.error(\"Error fetching Braintree token:\", error);\r\n+      // toast.error(\"Failed to load payment gateway. Try again.\");\r\n+    // }\r\n+  // };\r\n+\r\n+  // useEffect(() => {\r\n+    // if (auth?.token) getToken();\r\n+  // }, [auth?.token]);\r\n+\r\n+\r\n+\r\n+  // Handle payment---\r\n+\r\n+  // const handlePayment = async () => {\r\n+    // if (!instance) {\r\n+      // toast.error(\"Payment UI not loaded. Try again.\");\r\n+      // return;\r\n+    // }\r\n+\r\n+    // try {\r\n+      // setLoading(true);\r\n+      // const { nonce } = await instance.requestPaymentMethod();\r\n+\r\n+      // const { data } = await axios.post(\"/api/v1/product/braintree/payment\", {\r\n+        // nonce,\r\n+        // cart,\r\n+      // });\r\n+\r\n+      // setLoading(false);\r\n+      // setCart([]);\r\n+      // localStorage.removeItem(\"cart\");\r\n+      // toast.success(\"Payment Completed Successfully!\");\r\n+      // navigate(\"/dashboard/user/orders\");\r\n+    // } catch (error) {\r\n+      // console.error(\"Payment error:\", error);\r\n+      // toast.error(\"Payment failed. Try again.\");\r\n+      // setLoading(false);\r\n+    // }\r\n+  // };\r\n+\r\n+\r\n+  //handle payment for razorpay----\r\n+\r\n+// const handlePayment = async () => {\r\n+  // try {\r\n+    // const { data } = await axios.post(`${process.env.REACT_APP_API}/api/v1/payment/create-order`, {\r\n+      // amount: cart.reduce((acc, item) => acc + item.price, 0)\r\n+    // });\r\n+// \r\n+    // const options = {\r\n+      // key: process.env.REACT_APP_RAZORPAY_KEY,\r\n+      // amount: data.order.amount,\r\n+      // currency: \"INR\",\r\n+      // name: \"Aranya\",\r\n+      // description: \"Order Payment\",\r\n+      // order_id: data.order.id,\r\n+      // handler: function (response) {\r\n+        // toast.success(\"Payment Successful!\");\r\n+        // console.log(response);\r\n+        // setCart([]);\r\n+        // localStorage.removeItem(\"cart\");\r\n+        // navigate(\"/dashboard/user/orders\");\r\n+      // },\r\n+      // prefill: {\r\n+        // name: auth?.user?.name,\r\n+        // email: auth?.user?.email,\r\n+        // contact: \"9999999999\"\r\n+      // },\r\n+      // theme: {\r\n+        // color: \"#3399cc\"\r\n+      // }\r\n+    // };\r\n+// \r\n+    // const razor = new window.Razorpay(options);\r\n+    // razor.open();\r\n+// \r\n+  // } catch (error) {\r\n+    // console.log(error);\r\n+    // toast.error(\"Payment Failed!\");\r\n+  // }\r\n+// };\r\n+\r\n+\r\n+useEffect(() => {\r\n+  const script = document.createElement(\"script\");\r\n+  script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n+  script.async = true;\r\n+  document.body.appendChild(script);\r\n+}, []);\r\n+\r\n+\r\n+//handlerazorpay---\r\n+const handleRazorpayPayment = async () => {\r\n+  try {\r\n+    const amount = cart.reduce((acc, item) => acc + item.price, 0);\r\n+\r\n+    const { data: order } = await axios.post(\"/api/v1/product/razorpay/order\", {\r\n+      amount,\r\n+    });\r\n+\r\n+    const options = {\r\n+      key: process.env.REACT_APP_RAZORPAY_KEY,\r\n+      amount: order.amount,\r\n+      currency: order.currency,\r\n+      name: \"Aranya E-commerce\",\r\n+      description: \"Test Transaction\",\r\n+      order_id: order.id,\r\n+      handler: async function (response) {\r\n+        const verifyRes = await axios.post(\"/api/v1/product/razorpay/verify\", {\r\n+          razorpay_order_id: response.razorpay_order_id,\r\n+          razorpay_payment_id: response.razorpay_payment_id,\r\n+          razorpay_signature: response.razorpay_signature,\r\n+        });\r\n+\r\n+        if (verifyRes.data.success) {\r\n+          setCart([]);\r\n+          localStorage.removeItem(\"cart\");\r\n+          toast.success(\"Payment successful!\");\r\n+          navigate(\"/dashboard/user/orders\");\r\n+        } else {\r\n+          toast.error(\"Payment verification failed\");\r\n+        }\r\n+      },\r\n+      prefill: {\r\n+        name: auth?.user?.name,\r\n+        email: auth?.user?.email,\r\n+        contact: \"9999999999\",\r\n+      },\r\n+      theme: {\r\n+        color: \"#3399cc\",\r\n+      },\r\n+    };\r\n+\r\n+    const rzp = new window.Razorpay(options);\r\n+    rzp.open();\r\n+  } catch (error) {\r\n+    console.error(\"Razorpay error:\", error);\r\n+    toast.error(\"Payment failed. Try again.\");\r\n+  }\r\n+};\r\n+\r\n+  return (\r\n+    <Layout>\r\n+      <div className=\"cart-page container\">\r\n+        <div className=\"row\">\r\n+          <div className=\"col-md-12 text-center p-2 mb-3\">\r\n+            <h2>Hello {auth?.user?.name || \"Guest\"}</h2>\r\n+            <p>\r\n+              {cart?.length\r\n+                ? `You have ${cart.length} item(s) in your cart ${\r\n+                    auth?.token ? \"\" : \"— please login to checkout!\"\r\n+                  }`\r\n+                : \"Your cart is empty.\"}\r\n+            </p>\r\n+          </div>\r\n+        </div>\r\n+\r\n+        <div className=\"row\">\r\n+          {/* Cart Items */}\r\n+          <div className=\"col-md-7\">\r\n+            {cart?.map((item) => (\r\n+              <div className=\"row card flex-row mb-3\" key={item._id}>\r\n+                <div className=\"col-md-4\">\r\n+                  <img\r\n+                    src={`/api/v1/product/product-photo/${item._id}`}\r\n+                    className=\"card-img-top\"\r\n+                    alt={item.name}\r\n+                    width=\"100%\"\r\n+                    height=\"130\"\r\n+                  />\r\n+                </div>\r\n+                <div className=\"col-md-4\">\r\n+                  <p>{item.name}</p>\r\n+                  <p>{item.description?.substring(0, 30)}...</p>\r\n+                  <p>Price: ₹{item.price}</p>\r\n+                </div>\r\n+                <div className=\"col-md-4 cart-remove-btn\">\r\n+                  <button\r\n+                    className=\"btn btn-danger\"\r\n+                    onClick={() => removeCartItem(item._id)}\r\n+                  >\r\n+                    Remove\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+            ))}\r\n+          </div>\r\n+\r\n+          {/* Summary & Payment */}\r\n+          <div className=\"col-md-5 cart-summary\">\r\n+            <h3>Cart Summary</h3>\r\n+            <p>Total | Checkout | Payment</p>\r\n+            <hr />\r\n+            <h4>Total: {totalPrice()}</h4>\r\n+\r\n+            {/* Address Section */}\r\n+            {auth?.user?.address ? (\r\n+              <div className=\"mb-3\">\r\n+                <h5>Current Address</h5>\r\n+                <p>{auth.user.address}</p>\r\n+                <button\r\n+                  className=\"btn btn-outline-warning\"\r\n+                  onClick={() => navigate(\"/dashboard/user/profile\")}\r\n+                >\r\n+                  Update Address\r\n+                </button>\r\n+              </div>\r\n+            ) : (\r\n+              <div className=\"mb-3\">\r\n+                <button\r\n+                  className=\"btn btn-outline-warning\"\r\n+                  onClick={() =>\r\n+                    navigate(auth?.token ? \"/dashboard/user/profile\" : \"/login\", {\r\n+                      state: \"/cart\",\r\n+                    })\r\n+                  }\r\n+                >\r\n+                  {auth?.token ? \"Add Address\" : \"Login to Checkout\"}\r\n+                </button>\r\n+              </div>\r\n+            )}\r\n+\r\n+            {/* Braintree Payment DropIn */}\r\n+            {/* {clientToken && cart?.length > 0 && auth?.token ? ( \r\n+              {/* // <div className=\"mt-3\"> */}\r\n+                {/* // <DropIn \r\n+                  // options={{\r\n+                    */}\r\n+                    {/* authorization: clientToken,\r\n+                    // paypal: { flow: \"vault\" },\r\n+                  // }}\r\n+                  // onInstance={(instance) => setInstance(instance)}\r\n+                // />*/}\r\n+                 {/* <button */}\r\n+                  {/* // className=\"btn btn-primary mt-3\" */}\r\n+                  {/* // onClick={handlePayment} */}\r\n+                  {/* // disabled={loading || !instance} */}\r\n+                {/* // > */}\r\n+                  {/* // {loading ? \"Processing...\" : \"Make Payment\"} */}\r\n+                {/* // </button> */}\r\n+              {/* // </div> */}\r\n+            {/* // ) : ( */}\r\n+              {/* // <div className=\"text-danger mt-3\"> */}\r\n+                {/* // <AiFillWarning size={20} /> Payment system not ready */}\r\n+              {/* // </div> */}\r\n+            {/* // )} */}\r\n+  \r\n+      {/* Razorpay Payment Button */}\r\n+      {cart?.length > 0 && auth?.token ? (\r\n+  <button\r\n+    className=\"btn btn-primary mt-3\"\r\n+    onClick={handleRazorpayPayment}\r\n+  >\r\n+    Make Payment\r\n+  </button>\r\n+) : (\r\n+  <div className=\"text-danger mt-3\">\r\n+    Please login or add items to cart to proceed.\r\n+  </div>\r\n+)}\r\n+\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+     </Layout>\r\n+   );\r\n+ };\r\n+\r\n+ export default CartPage;\r\n+\r\n+\r\n+\r\n+\r\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752983019127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n         if (verifyRes.data.success) {\r\n           setCart([]);\r\n           localStorage.removeItem(\"cart\");\r\n           toast.success(\"Payment successful!\");\r\n-          navigate(\"/dashboard/user/orders\");\r\n+          navigate(\"/payment-success\");\r\n         } else {\r\n           toast.error(\"Payment verification failed\");\r\n         }\r\n       },\r\n@@ -326,335 +326,5 @@\n \r\n \r\n \r\n \r\n- \n-import React, { useState, useEffect } from \"react\";\r\n-import Layout from \"../components/Layouts/Layout\";\r\n-import { useCart } from \"../context/cart\";\r\n-import { useAuth } from \"../context/auth\";\r\n-import { useNavigate } from \"react-router-dom\";\r\n-// import DropIn from \"braintree-web-drop-in-react\";\r\n-import axios from \"axios\";\r\n-import toast from \"react-hot-toast\";\r\n-import \"../styles/CartStyles.css\";\r\n-// import { AiFillWarning } from \"react-icons/ai\";\r\n-\r\n-const CartPage = () => {\r\n-  const [auth] = useAuth();\r\n-  const [cart, setCart] = useCart();\r\n-  // const [clientToken, setClientToken] = useState(\"\");\r\n-  // const [instance, setInstance] = useState(null);\r\n-  // const [loading, setLoading] = useState(false);\r\n-  const navigate = useNavigate();\r\n-\r\n-  // Calculate total cart price-----\r\n-  const totalPrice = () => {\r\n-    try {\r\n-      const total = cart?.reduce((acc, item) => acc + item.price, 0);\r\n-      return total.toLocaleString(\"en-IN\", {\r\n-        style: \"currency\",\r\n-        currency: \"INR\",\r\n-      });\r\n-    } catch (error) {\r\n-      console.error(\"Error calculating total price:\", error);\r\n-      return \"₹0\";\r\n-    }\r\n-  };\r\n-\r\n-\r\n-  // Remove item from cart--\r\n-  const removeCartItem = (pid) => {\r\n-    try {\r\n-      const updatedCart = cart.filter((item) => item._id !== pid);\r\n-      setCart(updatedCart);\r\n-      localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\r\n-    } catch (error) {\r\n-      console.error(\"Error removing cart item:\", error);\r\n-    }\r\n-  };\r\n-\r\n-\r\n-  // Fetch client token for Braintree\r\n-  // const getToken = async () => {\r\n-    // try {\r\n-      // const { data } = await axios.get(\"/api/v1/product/braintree/token\");\r\n-      // if (data?.clientToken) {\r\n-        // setClientToken(data.clientToken);\r\n-      // } else {\r\n-        // toast.error(\"Failed to load payment gateway. Try again.\");\r\n-      // }\r\n-    // } catch (error) {\r\n-      // console.error(\"Error fetching Braintree token:\", error);\r\n-      // toast.error(\"Failed to load payment gateway. Try again.\");\r\n-    // }\r\n-  // };\r\n-\r\n-  // useEffect(() => {\r\n-    // if (auth?.token) getToken();\r\n-  // }, [auth?.token]);\r\n-\r\n-\r\n-\r\n-  // Handle payment---\r\n-\r\n-  // const handlePayment = async () => {\r\n-    // if (!instance) {\r\n-      // toast.error(\"Payment UI not loaded. Try again.\");\r\n-      // return;\r\n-    // }\r\n-\r\n-    // try {\r\n-      // setLoading(true);\r\n-      // const { nonce } = await instance.requestPaymentMethod();\r\n-\r\n-      // const { data } = await axios.post(\"/api/v1/product/braintree/payment\", {\r\n-        // nonce,\r\n-        // cart,\r\n-      // });\r\n-\r\n-      // setLoading(false);\r\n-      // setCart([]);\r\n-      // localStorage.removeItem(\"cart\");\r\n-      // toast.success(\"Payment Completed Successfully!\");\r\n-      // navigate(\"/dashboard/user/orders\");\r\n-    // } catch (error) {\r\n-      // console.error(\"Payment error:\", error);\r\n-      // toast.error(\"Payment failed. Try again.\");\r\n-      // setLoading(false);\r\n-    // }\r\n-  // };\r\n-\r\n-\r\n-  //handle payment for razorpay----\r\n-\r\n-// const handlePayment = async () => {\r\n-  // try {\r\n-    // const { data } = await axios.post(`${process.env.REACT_APP_API}/api/v1/payment/create-order`, {\r\n-      // amount: cart.reduce((acc, item) => acc + item.price, 0)\r\n-    // });\r\n-// \r\n-    // const options = {\r\n-      // key: process.env.REACT_APP_RAZORPAY_KEY,\r\n-      // amount: data.order.amount,\r\n-      // currency: \"INR\",\r\n-      // name: \"Aranya\",\r\n-      // description: \"Order Payment\",\r\n-      // order_id: data.order.id,\r\n-      // handler: function (response) {\r\n-        // toast.success(\"Payment Successful!\");\r\n-        // console.log(response);\r\n-        // setCart([]);\r\n-        // localStorage.removeItem(\"cart\");\r\n-        // navigate(\"/dashboard/user/orders\");\r\n-      // },\r\n-      // prefill: {\r\n-        // name: auth?.user?.name,\r\n-        // email: auth?.user?.email,\r\n-        // contact: \"9999999999\"\r\n-      // },\r\n-      // theme: {\r\n-        // color: \"#3399cc\"\r\n-      // }\r\n-    // };\r\n-// \r\n-    // const razor = new window.Razorpay(options);\r\n-    // razor.open();\r\n-// \r\n-  // } catch (error) {\r\n-    // console.log(error);\r\n-    // toast.error(\"Payment Failed!\");\r\n-  // }\r\n-// };\r\n-\r\n-\r\n-useEffect(() => {\r\n-  const script = document.createElement(\"script\");\r\n-  script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n-  script.async = true;\r\n-  document.body.appendChild(script);\r\n-}, []);\r\n-\r\n-\r\n-//handlerazorpay---\r\n-const handleRazorpayPayment = async () => {\r\n-  try {\r\n-    const amount = cart.reduce((acc, item) => acc + item.price, 0);\r\n-\r\n-    const { data: order } = await axios.post(\"/api/v1/product/razorpay/order\", {\r\n-      amount,\r\n-    });\r\n-\r\n-    const options = {\r\n-      key: process.env.REACT_APP_RAZORPAY_KEY,\r\n-      amount: order.amount,\r\n-      currency: order.currency,\r\n-      name: \"Aranya E-commerce\",\r\n-      description: \"Test Transaction\",\r\n-      order_id: order.id,\r\n-      handler: async function (response) {\r\n-        const verifyRes = await axios.post(\"/api/v1/product/razorpay/verify\", {\r\n-          razorpay_order_id: response.razorpay_order_id,\r\n-          razorpay_payment_id: response.razorpay_payment_id,\r\n-          razorpay_signature: response.razorpay_signature,\r\n-        });\r\n-\r\n-        if (verifyRes.data.success) {\r\n-          setCart([]);\r\n-          localStorage.removeItem(\"cart\");\r\n-          toast.success(\"Payment successful!\");\r\n-          navigate(\"/dashboard/user/orders\");\r\n-        } else {\r\n-          toast.error(\"Payment verification failed\");\r\n-        }\r\n-      },\r\n-      prefill: {\r\n-        name: auth?.user?.name,\r\n-        email: auth?.user?.email,\r\n-        contact: \"9999999999\",\r\n-      },\r\n-      theme: {\r\n-        color: \"#3399cc\",\r\n-      },\r\n-    };\r\n-\r\n-    const rzp = new window.Razorpay(options);\r\n-    rzp.open();\r\n-  } catch (error) {\r\n-    console.error(\"Razorpay error:\", error);\r\n-    toast.error(\"Payment failed. Try again.\");\r\n-  }\r\n-};\r\n-\r\n-  return (\r\n-    <Layout>\r\n-      <div className=\"cart-page container\">\r\n-        <div className=\"row\">\r\n-          <div className=\"col-md-12 text-center bg-light p-2 mb-3\">\r\n-            <h2>Hello {auth?.user?.name || \"Guest\"}</h2>\r\n-            <p>\r\n-              {cart?.length\r\n-                ? `You have ${cart.length} item(s) in your cart ${\r\n-                    auth?.token ? \"\" : \"— please login to checkout!\"\r\n-                  }`\r\n-                : \"Your cart is empty.\"}\r\n-            </p>\r\n-          </div>\r\n-        </div>\r\n-\r\n-        <div className=\"row\">\r\n-          {/* Cart Items */}\r\n-          <div className=\"col-md-7\">\r\n-            {cart?.map((item) => (\r\n-              <div className=\"row card flex-row mb-3\" key={item._id}>\r\n-                <div className=\"col-md-4\">\r\n-                  <img\r\n-                    src={`/api/v1/product/product-photo/${item._id}`}\r\n-                    className=\"card-img-top\"\r\n-                    alt={item.name}\r\n-                    width=\"100%\"\r\n-                    height=\"130\"\r\n-                  />\r\n-                </div>\r\n-                <div className=\"col-md-4\">\r\n-                  <p>{item.name}</p>\r\n-                  <p>{item.description?.substring(0, 30)}...</p>\r\n-                  <p>Price: ₹{item.price}</p>\r\n-                </div>\r\n-                <div className=\"col-md-4 cart-remove-btn\">\r\n-                  <button\r\n-                    className=\"btn btn-danger\"\r\n-                    onClick={() => removeCartItem(item._id)}\r\n-                  >\r\n-                    Remove\r\n-                  </button>\r\n-                </div>\r\n-              </div>\r\n-            ))}\r\n-          </div>\r\n-\r\n-          {/* Summary & Payment */}\r\n-          <div className=\"col-md-5 cart-summary\">\r\n-            <h3>Cart Summary</h3>\r\n-            <p>Total | Checkout | Payment</p>\r\n-            <hr />\r\n-            <h4>Total: {totalPrice()}</h4>\r\n-\r\n-            {/* Address Section */}\r\n-            {auth?.user?.address ? (\r\n-              <div className=\"mb-3\">\r\n-                <h5>Current Address</h5>\r\n-                <p>{auth.user.address}</p>\r\n-                <button\r\n-                  className=\"btn btn-outline-warning\"\r\n-                  onClick={() => navigate(\"/dashboard/user/profile\")}\r\n-                >\r\n-                  Update Address\r\n-                </button>\r\n-              </div>\r\n-            ) : (\r\n-              <div className=\"mb-3\">\r\n-                <button\r\n-                  className=\"btn btn-outline-warning\"\r\n-                  onClick={() =>\r\n-                    navigate(auth?.token ? \"/dashboard/user/profile\" : \"/login\", {\r\n-                      state: \"/cart\",\r\n-                    })\r\n-                  }\r\n-                >\r\n-                  {auth?.token ? \"Add Address\" : \"Login to Checkout\"}\r\n-                </button>\r\n-              </div>\r\n-            )}\r\n-\r\n-            {/* Braintree Payment DropIn */}\r\n-            {/* {clientToken && cart?.length > 0 && auth?.token ? ( \r\n-              {/* // <div className=\"mt-3\"> */}\r\n-                {/* // <DropIn \r\n-                  // options={{\r\n-                    */}\r\n-                    {/* authorization: clientToken,\r\n-                    // paypal: { flow: \"vault\" },\r\n-                  // }}\r\n-                  // onInstance={(instance) => setInstance(instance)}\r\n-                // />*/}\r\n-                 {/* <button */}\r\n-                  {/* // className=\"btn btn-primary mt-3\" */}\r\n-                  {/* // onClick={handlePayment} */}\r\n-                  {/* // disabled={loading || !instance} */}\r\n-                {/* // > */}\r\n-                  {/* // {loading ? \"Processing...\" : \"Make Payment\"} */}\r\n-                {/* // </button> */}\r\n-              {/* // </div> */}\r\n-            {/* // ) : ( */}\r\n-              {/* // <div className=\"text-danger mt-3\"> */}\r\n-                {/* // <AiFillWarning size={20} /> Payment system not ready */}\r\n-              {/* // </div> */}\r\n-            {/* // )} */}\r\n-  \r\n-      {/* Razorpay Payment Button */}\r\n-      {cart?.length > 0 && auth?.token ? (\r\n-  <button\r\n-    className=\"btn btn-primary mt-3\"\r\n-    onClick={handleRazorpayPayment}\r\n-  >\r\n-    Make Payment\r\n-  </button>\r\n-) : (\r\n-  <div className=\"text-danger mt-3\">\r\n-    Please login or add items to cart to proceed.\r\n-  </div>\r\n-)}\r\n-\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-     </Layout>\r\n-   );\r\n- };\r\n-\r\n- export default CartPage;\r\n-\r\n-\r\n-\r\n-\r\n  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752985150718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,8 +222,9 @@\n                     className=\"card-img-top\"\r\n                     alt={item.name}\r\n                     width=\"100%\"\r\n                     height=\"130\"\r\n+                    loading=\"lazy\"\r\n                   />\r\n                 </div>\r\n                 <div className=\"col-md-4\">\r\n                   <p>{item.name}</p>\r\n"
                },
                {
                    "date": 1752994731245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,9 +304,9 @@\n   \r\n       {/* Razorpay Payment Button */}\r\n       {cart?.length > 0 && auth?.token ? (\r\n   <button\r\n-    className=\"btn btn-primary mt-3\"\r\n+    className=\"btn btn-checkout\"\r\n     onClick={handleRazorpayPayment}\r\n   >\r\n     Make Payment\r\n   </button>\r\n"
                },
                {
                    "date": 1752994826623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,9 +247,9 @@\n           <div className=\"col-md-5 cart-summary\">\r\n             <h3>Cart Summary</h3>\r\n             <p>Total | Checkout | Payment</p>\r\n             <hr />\r\n-            <h4>Total: {totalPrice()}</h4>\r\n+            <h4>Total: <b>{totalPrice()}</b></h4>\r\n \r\n             {/* Address Section */}\r\n             {auth?.user?.address ? (\r\n               <div className=\"mb-3\">\r\n"
                },
                {
                    "date": 1752994858320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,9 +228,9 @@\n                 </div>\r\n                 <div className=\"col-md-4\">\r\n                   <p>{item.name}</p>\r\n                   <p>{item.description?.substring(0, 30)}...</p>\r\n-                  <p>Price: ₹{item.price}</p>\r\n+                  <p>Price: <b>₹{item.price}</b></p>\r\n                 </div>\r\n                 <div className=\"col-md-4 cart-remove-btn\">\r\n                   <button\r\n                     className=\"btn btn-danger\"\r\n"
                },
                {
                    "date": 1752994895314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n                     loading=\"lazy\"\r\n                   />\r\n                 </div>\r\n                 <div className=\"col-md-4\">\r\n-                  <p>{item.name}</p>\r\n+                  <p><b>{item.name}</b></p>\r\n                   <p>{item.description?.substring(0, 30)}...</p>\r\n                   <p>Price: <b>₹{item.price}</b></p>\r\n                 </div>\r\n                 <div className=\"col-md-4 cart-remove-btn\">\r\n"
                },
                {
                    "date": 1752994983186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     <Layout>\r\n       <div className=\"cart-page container\">\r\n         <div className=\"row\">\r\n           <div className=\"col-md-12 text-center p-2 mb-3\">\r\n-            <h2>Hello {auth?.user?.name || \"Guest\"}</h2>\r\n+            <h2><i>Hello {auth?.user?.name || \"Guest\"}</i></h2>\r\n             <p>\r\n               {cart?.length\r\n                 ? `You have ${cart.length} item(s) in your cart ${\r\n                     auth?.token ? \"\" : \"— please login to checkout!\"\r\n"
                },
                {
                    "date": 1752995010264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     <Layout>\r\n       <div className=\"cart-page container\">\r\n         <div className=\"row\">\r\n           <div className=\"col-md-12 text-center p-2 mb-3\">\r\n-            <h2><i>Hello {auth?.user?.name || \"Guest\"}</i></h2>\r\n+            <h2><b><i>Hello {auth?.user?.name || \"Guest\"}</i></b></h2>\r\n             <p>\r\n               {cart?.length\r\n                 ? `You have ${cart.length} item(s) in your cart ${\r\n                     auth?.token ? \"\" : \"— please login to checkout!\"\r\n"
                },
                {
                    "date": 1752996655409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+import React, { useState, useEffect } from \"react\";\r\n+import Layout from \"../components/Layouts/Layout\";\r\n+import { useCart } from \"../context/cart\";\r\n+import { useAuth } from \"../context/auth\";\r\n+import { useNavigate } from \"react-router-dom\";\r\n+// import DropIn from \"braintree-web-drop-in-react\";\r\n+import axios from \"axios\";\r\n+import toast from \"react-hot-toast\";\r\n+import \"../styles/CartStyles.css\";\r\n+// import { AiFillWarning } from \"react-icons/ai\";\r\n+\r\n+const CartPage = () => {\r\n+  const [auth] = useAuth();\r\n+  const [cart, setCart] = useCart();\r\n+  // const [clientToken, setClientToken] = useState(\"\");\r\n+  // const [instance, setInstance] = useState(null);\r\n+  // const [loading, setLoading] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  // Calculate total cart price-----\r\n+  const totalPrice = () => {\r\n+    try {\r\n+      const total = cart?.reduce((acc, item) => acc + item.price, 0);\r\n+      return total.toLocaleString(\"en-IN\", {\r\n+        style: \"currency\",\r\n+        currency: \"INR\",\r\n+      });\r\n+    } catch (error) {\r\n+      console.error(\"Error calculating total price:\", error);\r\n+      return \"₹0\";\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  // Remove item from cart--\r\n+  const removeCartItem = (pid) => {\r\n+    try {\r\n+      const updatedCart = cart.filter((item) => item._id !== pid);\r\n+      setCart(updatedCart);\r\n+      localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\r\n+    } catch (error) {\r\n+      console.error(\"Error removing cart item:\", error);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  // Fetch client token for Braintree\r\n+  // const getToken = async () => {\r\n+    // try {\r\n+      // const { data } = await axios.get(\"/api/v1/product/braintree/token\");\r\n+      // if (data?.clientToken) {\r\n+        // setClientToken(data.clientToken);\r\n+      // } else {\r\n+        // toast.error(\"Failed to load payment gateway. Try again.\");\r\n+      // }\r\n+    // } catch (error) {\r\n+      // console.error(\"Error fetching Braintree token:\", error);\r\n+      // toast.error(\"Failed to load payment gateway. Try again.\");\r\n+    // }\r\n+  // };\r\n+\r\n+  // useEffect(() => {\r\n+    // if (auth?.token) getToken();\r\n+  // }, [auth?.token]);\r\n+\r\n+\r\n+\r\n+  // Handle payment---\r\n+\r\n+  // const handlePayment = async () => {\r\n+    // if (!instance) {\r\n+      // toast.error(\"Payment UI not loaded. Try again.\");\r\n+      // return;\r\n+    // }\r\n+\r\n+    // try {\r\n+      // setLoading(true);\r\n+      // const { nonce } = await instance.requestPaymentMethod();\r\n+\r\n+      // const { data } = await axios.post(\"/api/v1/product/braintree/payment\", {\r\n+        // nonce,\r\n+        // cart,\r\n+      // });\r\n+\r\n+      // setLoading(false);\r\n+      // setCart([]);\r\n+      // localStorage.removeItem(\"cart\");\r\n+      // toast.success(\"Payment Completed Successfully!\");\r\n+      // navigate(\"/dashboard/user/orders\");\r\n+    // } catch (error) {\r\n+      // console.error(\"Payment error:\", error);\r\n+      // toast.error(\"Payment failed. Try again.\");\r\n+      // setLoading(false);\r\n+    // }\r\n+  // };\r\n+\r\n+\r\n+  //handle payment for razorpay----\r\n+\r\n+// const handlePayment = async () => {\r\n+  // try {\r\n+    // const { data } = await axios.post(`${process.env.REACT_APP_API}/api/v1/payment/create-order`, {\r\n+      // amount: cart.reduce((acc, item) => acc + item.price, 0)\r\n+    // });\r\n+// \r\n+    // const options = {\r\n+      // key: process.env.REACT_APP_RAZORPAY_KEY,\r\n+      // amount: data.order.amount,\r\n+      // currency: \"INR\",\r\n+      // name: \"Aranya\",\r\n+      // description: \"Order Payment\",\r\n+      // order_id: data.order.id,\r\n+      // handler: function (response) {\r\n+        // toast.success(\"Payment Successful!\");\r\n+        // console.log(response);\r\n+        // setCart([]);\r\n+        // localStorage.removeItem(\"cart\");\r\n+        // navigate(\"/dashboard/user/orders\");\r\n+      // },\r\n+      // prefill: {\r\n+        // name: auth?.user?.name,\r\n+        // email: auth?.user?.email,\r\n+        // contact: \"9999999999\"\r\n+      // },\r\n+      // theme: {\r\n+        // color: \"#3399cc\"\r\n+      // }\r\n+    // };\r\n+// \r\n+    // const razor = new window.Razorpay(options);\r\n+    // razor.open();\r\n+// \r\n+  // } catch (error) {\r\n+    // console.log(error);\r\n+    // toast.error(\"Payment Failed!\");\r\n+  // }\r\n+// };\r\n+\r\n+\r\n+useEffect(() => {\r\n+  const script = document.createElement(\"script\");\r\n+  script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\r\n+  script.async = true;\r\n+  document.body.appendChild(script);\r\n+}, []);\r\n+\r\n+\r\n+//handlerazorpay---\r\n+const handleRazorpayPayment = async () => {\r\n+  try {\r\n+    const amount = cart.reduce((acc, item) => acc + item.price, 0);\r\n+\r\n+    const { data: order } = await axios.post(\"/api/v1/product/razorpay/order\", {\r\n+      amount,\r\n+    });\r\n+\r\n+    const options = {\r\n+      key: process.env.REACT_APP_RAZORPAY_KEY,\r\n+      amount: order.amount,\r\n+      currency: order.currency,\r\n+      name: \"Aranya E-commerce\",\r\n+      description: \"Test Transaction\",\r\n+      order_id: order.id,\r\n+      handler: async function (response) {\r\n+        const verifyRes = await axios.post(\"/api/v1/product/razorpay/verify\", {\r\n+          razorpay_order_id: response.razorpay_order_id,\r\n+          razorpay_payment_id: response.razorpay_payment_id,\r\n+          razorpay_signature: response.razorpay_signature,\r\n+        });\r\n+\r\n+        if (verifyRes.data.success) {\r\n+          setCart([]);\r\n+          localStorage.removeItem(\"cart\");\r\n+          toast.success(\"Payment successful!\");\r\n+          navigate(\"/payment-success\");\r\n+        } else {\r\n+          toast.error(\"Payment verification failed\");\r\n+        }\r\n+      },\r\n+      prefill: {\r\n+        name: auth?.user?.name,\r\n+        email: auth?.user?.email,\r\n+        contact: \"9999999999\",\r\n+      },\r\n+      theme: {\r\n+        color: \"#3399cc\",\r\n+      },\r\n+    };\r\n+\r\n+    const rzp = new window.Razorpay(options);\r\n+    rzp.open();\r\n+  } catch (error) {\r\n+    console.error(\"Razorpay error:\", error);\r\n+    toast.error(\"Payment failed. Try again.\");\r\n+  }\r\n+};\r\n+\r\n+  return (\r\n+    // <Layout>\r\n+    <Layout\r\n+  title={\"Your Cart | Aranya\"}\r\n+  description={\"View and manage your cart. Shop biodegradable and sustainable products from Aranya easily.\"}\r\n+  keywords={\"aranya cart, eco-friendly shopping, biodegradable products, view cart\"}\r\n+  author={\"Krishna Kumar\"}\r\n+>\r\n+      <div className=\"cart-page container\">\r\n+        <div className=\"row\">\r\n+          <div className=\"col-md-12 text-center p-2 mb-3\">\r\n+            <h2><b><i>Hello {auth?.user?.name || \"Guest\"}</i></b></h2>\r\n+            <p>\r\n+              {cart?.length\r\n+                ? `You have ${cart.length} item(s) in your cart ${\r\n+                    auth?.token ? \"\" : \"— please login to checkout!\"\r\n+                  }`\r\n+                : \"Your cart is empty.\"}\r\n+            </p>\r\n+          </div>\r\n+        </div>\r\n+\r\n+        <div className=\"row\">\r\n+          {/* Cart Items */}\r\n+          <div className=\"col-md-7\">\r\n+            {cart?.map((item) => (\r\n+              <div className=\"row card flex-row mb-3\" key={item._id}>\r\n+                <div className=\"col-md-4\">\r\n+                  <img\r\n+                    src={`/api/v1/product/product-photo/${item._id}`}\r\n+                    className=\"card-img-top\"\r\n+                    alt={item.name}\r\n+                    width=\"100%\"\r\n+                    height=\"130\"\r\n+                    loading=\"lazy\"\r\n+                  />\r\n+                </div>\r\n+                <div className=\"col-md-4\">\r\n+                  <p><b>{item.name}</b></p>\r\n+                  <p>{item.description?.substring(0, 30)}...</p>\r\n+                  <p>Price: <b>₹{item.price}</b></p>\r\n+                </div>\r\n+                <div className=\"col-md-4 cart-remove-btn\">\r\n+                  <button\r\n+                    className=\"btn btn-danger\"\r\n+                    onClick={() => removeCartItem(item._id)}\r\n+                  >\r\n+                    Remove\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+            ))}\r\n+          </div>\r\n+\r\n+          {/* Summary & Payment */}\r\n+          <div className=\"col-md-5 cart-summary\">\r\n+            <h3>Cart Summary</h3>\r\n+            <p>Total | Checkout | Payment</p>\r\n+            <hr />\r\n+            <h4>Total: <b>{totalPrice()}</b></h4>\r\n+\r\n+            {/* Address Section */}\r\n+            {auth?.user?.address ? (\r\n+              <div className=\"mb-3\">\r\n+                <h5>Current Address</h5>\r\n+                <p>{auth.user.address}</p>\r\n+                <button\r\n+                  className=\"btn btn-outline-warning\"\r\n+                  onClick={() => navigate(\"/dashboard/user/profile\")}\r\n+                >\r\n+                  Update Address\r\n+                </button>\r\n+              </div>\r\n+            ) : (\r\n+              <div className=\"mb-3\">\r\n+                <button\r\n+                  className=\"btn btn-outline-warning\"\r\n+                  onClick={() =>\r\n+                    navigate(auth?.token ? \"/dashboard/user/profile\" : \"/login\", {\r\n+                      state: \"/cart\",\r\n+                    })\r\n+                  }\r\n+                >\r\n+                  {auth?.token ? \"Add Address\" : \"Login to Checkout\"}\r\n+                </button>\r\n+              </div>\r\n+            )}\r\n+\r\n+            {/* Braintree Payment DropIn */}\r\n+            {/* {clientToken && cart?.length > 0 && auth?.token ? ( \r\n+              {/* // <div className=\"mt-3\"> */}\r\n+                {/* // <DropIn \r\n+                  // options={{\r\n+                    */}\r\n+                    {/* authorization: clientToken,\r\n+                    // paypal: { flow: \"vault\" },\r\n+                  // }}\r\n+                  // onInstance={(instance) => setInstance(instance)}\r\n+                // />*/}\r\n+                 {/* <button */}\r\n+                  {/* // className=\"btn btn-primary mt-3\" */}\r\n+                  {/* // onClick={handlePayment} */}\r\n+                  {/* // disabled={loading || !instance} */}\r\n+                {/* // > */}\r\n+                  {/* // {loading ? \"Processing...\" : \"Make Payment\"} */}\r\n+                {/* // </button> */}\r\n+              {/* // </div> */}\r\n+            {/* // ) : ( */}\r\n+              {/* // <div className=\"text-danger mt-3\"> */}\r\n+                {/* // <AiFillWarning size={20} /> Payment system not ready */}\r\n+              {/* // </div> */}\r\n+            {/* // )} */}\r\n+  \r\n+      {/* Razorpay Payment Button */}\r\n+      {cart?.length > 0 && auth?.token ? (\r\n+  <button\r\n+    className=\"btn btn-checkout\"\r\n+    onClick={handleRazorpayPayment}\r\n+  >\r\n+    Make Payment\r\n+  </button>\r\n+) : (\r\n+  <div className=\"text-danger mt-3\">\r\n+    Please login or add items to cart to proceed.\r\n+  </div>\r\n+)}\r\n+\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+     </Layout>\r\n+   );\r\n+ };\r\n+\r\n+ export default CartPage;\r\n+\r\n+\r\n+\r\n+\r\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1752853210577,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\r\nimport Layout from \"../components/Layouts/Layout\";\r\nimport { useCart } from \"../context/cart\";\r\nimport { useAuth } from \"../context/auth\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n// import DropIn from \"braintree-web-drop-in-react\";\r\nimport { AiFillWarning } from \"react-icons/ai\";\r\nimport axios from \"axios\";\r\nimport toast from \"react-hot-toast\";\r\nimport \"../styles/CartStyles.css\";\r\n\r\nconst CartPage = () => {\r\n  const [auth] = useAuth();\r\n  const [cart, setCart] = useCart();\r\n  const [clientToken, setClientToken] = useState(\"\");\r\n  const [instance, setInstance] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  // Calculate total cart price\r\n  const totalPrice = () => {\r\n    try {\r\n      const total = cart?.reduce((acc, item) => acc + item.price, 0);\r\n      return total.toLocaleString(\"en-IN\", {\r\n        style: \"currency\",\r\n        currency: \"INR\",\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error calculating total price:\", error);\r\n      return \"₹0\";\r\n    }\r\n  };\r\n\r\n  // Remove item from cart\r\n  const removeCartItem = (pid) => {\r\n    try {\r\n      const updatedCart = cart.filter((item) => item._id !== pid);\r\n      setCart(updatedCart);\r\n      localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\r\n    } catch (error) {\r\n      console.error(\"Error removing cart item:\", error);\r\n    }\r\n  };\r\n\r\n  // Fetch client token for Braintree\r\n  const getToken = async () => {\r\n    try {\r\n      const { data } = await axios.get(\"/api/v1/product/braintree/token\");\r\n      if (data?.clientToken) {\r\n        setClientToken(data.clientToken);\r\n      } else {\r\n        toast.error(\"Failed to load payment gateway. Try again.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching Braintree token:\", error);\r\n      toast.error(\"Failed to load payment gateway. Try again.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (auth?.token) getToken();\r\n  }, [auth?.token]);\r\n\r\n  // Handle payment\r\n  const handlePayment = async () => {\r\n    if (!instance) {\r\n      toast.error(\"Payment UI not loaded. Try again.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const { nonce } = await instance.requestPaymentMethod();\r\n\r\n      const { data } = await axios.post(\"/api/v1/product/braintree/payment\", {\r\n        nonce,\r\n        cart,\r\n      });\r\n\r\n      setLoading(false);\r\n      setCart([]);\r\n      localStorage.removeItem(\"cart\");\r\n      toast.success(\"Payment Completed Successfully!\");\r\n      navigate(\"/dashboard/user/orders\");\r\n    } catch (error) {\r\n      console.error(\"Payment error:\", error);\r\n      toast.error(\"Payment failed. Try again.\");\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"cart-page container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 text-center bg-light p-2 mb-3\">\r\n            <h2>Hello {auth?.user?.name || \"Guest\"}</h2>\r\n            <p>\r\n              {cart?.length\r\n                ? `You have ${cart.length} item(s) in your cart ${\r\n                    auth?.token ? \"\" : \"— please login to checkout!\"\r\n                  }`\r\n                : \"Your cart is empty.\"}\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          {/* Cart Items */}\r\n          <div className=\"col-md-7\">\r\n            {cart?.map((item) => (\r\n              <div className=\"row card flex-row mb-3\" key={item._id}>\r\n                <div className=\"col-md-4\">\r\n                  <img\r\n                    src={`/api/v1/product/product-photo/${item._id}`}\r\n                    className=\"card-img-top\"\r\n                    alt={item.name}\r\n                    width=\"100%\"\r\n                    height=\"130\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <p>{item.name}</p>\r\n                  <p>{item.description?.substring(0, 30)}...</p>\r\n                  <p>Price: ₹{item.price}</p>\r\n                </div>\r\n                <div className=\"col-md-4 cart-remove-btn\">\r\n                  <button\r\n                    className=\"btn btn-danger\"\r\n                    onClick={() => removeCartItem(item._id)}\r\n                  >\r\n                    Remove\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Summary & Payment */}\r\n          <div className=\"col-md-5 cart-summary\">\r\n            <h3>Cart Summary</h3>\r\n            <p>Total | Checkout | Payment</p>\r\n            <hr />\r\n            <h4>Total: {totalPrice()}</h4>\r\n\r\n            {/* Address Section */}\r\n            {auth?.user?.address ? (\r\n              <div className=\"mb-3\">\r\n                <h5>Current Address</h5>\r\n                <p>{auth.user.address}</p>\r\n                <button\r\n                  className=\"btn btn-outline-warning\"\r\n                  onClick={() => navigate(\"/dashboard/user/profile\")}\r\n                >\r\n                  Update Address\r\n                </button>\r\n              </div>\r\n            ) : (\r\n              <div className=\"mb-3\">\r\n                <button\r\n                  className=\"btn btn-outline-warning\"\r\n                  onClick={() =>\r\n                    navigate(auth?.token ? \"/dashboard/user/profile\" : \"/login\", {\r\n                      state: \"/cart\",\r\n                    })\r\n                  }\r\n                >\r\n                  {auth?.token ? \"Add Address\" : \"Login to Checkout\"}\r\n                </button>\r\n              </div>\r\n            )}\r\n\r\n            {/* Braintree Payment DropIn */}\r\n            {clientToken && cart?.length > 0 && auth?.token ? (\r\n              <div className=\"mt-3\">\r\n                <DropIn\r\n                  options={{\r\n                    authorization: clientToken,\r\n                    paypal: { flow: \"vault\" },\r\n                  }}\r\n                  onInstance={(instance) => setInstance(instance)}\r\n                />\r\n                <button\r\n                  className=\"btn btn-primary mt-3\"\r\n                  onClick={handlePayment}\r\n                  disabled={loading || !instance}\r\n                >\r\n                  {loading ? \"Processing...\" : \"Make Payment\"}\r\n                </button>\r\n              </div>\r\n            ) : (\r\n              <div className=\"text-danger mt-3\">\r\n                <AiFillWarning size={20} /> Payment system not ready\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default CartPage;\r\n"
        }
    ]
}